#+TITLE: Borgmarks - Merlin Corey at Github dot I/O
* Borgmarks
Bookmarks in emacs org-mode.

Curated, categorized, and tagged by hand.
* Theory of organization
** Categorization through headings
   - Top-level headings represent broad categories of related links.
   - Tagging is used for exposing topics related to a particular link.
** Subcategorization through subheadings
   - Subheadings are used to represent narrower subcategories within a particular category.
   - Subheadings *must* come *after* the sibling links.
** Tags for metadata
   - Tags should be single words so they can be categorized automatically without a full NLP engine
   - Tags should include the publish year and last update year if available
** Master list vs Category pages
   Currently there is only a single page master list, but it is getting very large to manage and read.
*** Roadmap
   In the future we will want to have tag, category, and potentially even subcategory pages.

   This will mean either compiling those pages from the master list, or compiling the master list from those pages.
   Compiling the master list from the categories and subcategories seems most appropriate.
*** History
    Originally, Borgmarks was a single =index.org= file with some example =elisp= code.
** Theory of operation
   - Links should be their own headings followed by tags.
   - Optional properties with CREATED date.
   - Description.
*** [[http://karl-voit.at/2014/08/10/bookmarks-with-orgmode/][Managing web bookmarks with Org-mode]] :emacs:orgmode:bookmarks:
:PROPERTIES:
:CREATED: [2014-08-09 Sat 10:41]
:END:
    Well written post linked to from [[https://www.reddit.com/r/orgmode/comments/3vtxz1/storing_a_collection_of_web_bookmarks_with_org/][this discussion on reddit]] and elsewhere.
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
  '(
    ;; many more capture templates
    ("b" "Bookmark" entry (file+headline "~/share/all/org-mode/notes.org" "Bookmarks") "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
    ;; many more capture templates
   )
)
#+END_SRC
*** [[http://orgmode.org/orgcard.pdf][Org Card]] 				       :emacs:orgmode:reference:card
* Algorithms
** [[https://bost.ocks.org/mike/algorithms/][Visualizing Algorithms]] 		  :bostocks:visualization:algorithms:
   Great overview of various algorithms with visualizations from visualization master Mike Bostocks.
** [[https://yurichev.com/blog/rubik/][Solving pocket Rubik's cube (2 * 2 * 2) using Z3 and SAT solver]] :algorithms:simplified:rubiks:cube:solver:
** [[https://users.cs.duke.edu/~ola/bubble/bubble.html][Bubble Sort: An Archaeological Algorithmic Analysis]] :algorithms:bubble:sort:analysis:
** [[http://www.keithschwarz.com/interesting/][The Archive of Interesting Code]] :algorithms:datastructures:archive:examples:
** [[https://accidentallyquadratic.tumblr.com/][Accidentally Quadratic]] 		   :blog:algorithms:complexity:big:o:
** [[https://www.redblobgames.com/grids/hexagons/][Hexagonal Grids]] :algorithms:datastructures:examples:hexagonal:grids:
** [[https://github.com/norvig/pytudes][Pytudes -  Python programs to practice or demonstrate skills.]] :norvig:python:etudes:algorithms:datastructures:problem:solving:
** [[https://github.com/mandliya/algorithms_and_data_structures][mandliya/algorithms_and_data_structures]] :algorithms:datastructures:c:++:
** [[https://www.slideshare.net/lmatteis/are-statecharts-the-next-big-ui-paradigm][Are statecharts the next big UI paradigm?]] :algorithms:visualization:state:machines:state:charts:
** [[https://statecharts.github.io/][Welcome to the (unfinished) world of Statecharts]] :algorithms:visualization:state:machines:state:charts:
*** [[https://news.ycombinator.com/item?id=15835005][Hacker News Discussion #15835005]]
** [[https://github.com/davidkpiano/xstate][Functional, Stateless JS Finite State Machines and Statecharts]] :algorithms:state:machines:state:charts:
** [[http://raganwald.com/2018/02/23/forde.html][Forde's Tenth Rule, or, "How I Learned to Stop Worrying and ❤ the State Machine"]] :algorithms:state:machines:
*** [[https://news.ycombinator.com/item?id=16468280][Hacker News Discussion #16468280]]
** [[https://fgiesen.wordpress.com/2018/02/19/reading-bits-in-far-too-many-ways-part-1/][Reading bits in far too many ways (part 1)]] :algorithms:encoding:decoding:bits:and:bytes:2018:
** [[https://fgiesen.wordpress.com/2018/02/20/reading-bits-in-far-too-many-ways-part-2/][Reading bits in far too many ways (part 2)]] :algorithms:encoding:decoding:bits:and:bytes:2018:
** [[https://graphics.stanford.edu/~seander/bithacks.html][Bit Twiddling Hacks]] :algorithms:encoding:decoding:bit:twiddling:2005:
** [[http://blog.refdash.com/dynamic-programming-tutorial-example/][Dynamic Programming – 7 Steps to Solve any DP Interview Problem]] :algorithms:dynamic:programming:recurrence:2018:
*** [[https://www.youtube.com/watch?v=kKhnYLpME3w][Refdash Demystifying Interviews - Dynamic Programming]] :video:algorithms:dynamic:programming:recurrence:2018:
** [[https://github.com/trekhleb/javascript-algorithms][trekhleb/javacript-algorithms]] :algorithms:datastructures:javascript:2018:
*** [[https://news.ycombinator.com/item?id=17134831][Hacker News Discussion #17134831]] :discussion:algorithms:datastructures:javascript:2018:
#+CAPTION: eximius gets down and dirty
#+BEGIN_QUOTE
The documentation and code quality is all good.

The implementation choices leave some things to be desired.
The Queue and Stack implementations are Linked Lists instead of array backed, the hash table is closed instead of (the only barely more complicated) open Robin hood hash table scheme, the union-find/disjoint-set implementation doesn't have path compression or rank unions.

Overall very good, but it could be Great (tm) with just a little bit of work.
#+END_QUOTE

#+CAPTION: deathanatos expounds and wonders
#+BEGIN_QUOTE
> I thought array-based queues resulted in O(n) queue/dequeue.

Not necessarily. A circular buffer[1] can be used as a queue with O(1) queue/dequeue. C++ implementations (gcc?), IIRC, uses an interesting array-of-arrays approach; it also has O(1) queue/dequeue. I'm not sure why the array-of-arrays approach is better than a circular buffer, though.

Array based designs can result is less allocations, and maybe less overhead. For example, if you have a circular buffer with space for 16 items, it only needs to allocate space if you need more room, whereas a linked list queue would allocate for each and every item placed into it. Linked lists also require space for the pointer to the next link, for each link in the list. (And, if you keep them, back pointers, though these aren't necessary for just a queue.) Arrays might have some unused slack space, however.

[1]: https://en.wikipedia.org/wiki/Circular_buffer
#+END_QUOTE

#+CAPTION: jayd16 opines
#+BEGIN_QUOTE
Resizing a fully contiguous circle buffer would cause a copy every element as well forcing you to make a single contiguous memory section.
Array of arrays just needs to resize the top level array.
#+END_QUOTE

#+CAPTION: manwe150 sublimes
#+BEGIN_QUOTE
But the copy only has to move n items, but was constructed with m items, where n < m (and usually n << m).
Where n is the max size of the queue and m is the total number of items that will ever be enqueued.

On the other hand, an array of arrays (no recursion) doesn’t change the big-O complexity cost, just the constant multiplier.
That should definitely improve performance of the uncommon operation (the copy), but hypothetically might slow down the actual queuing operations (and drastically reduce throughout)

But maybe you meant the array of arrays to be recursive? That seems like it would alter the big-O (from n+m to log(n)+m).
But typically m>>n, so the net result is the same.
#+END_QUOTE
*** [[https://news.ycombinator.com/item?id=17573431][Hacker News Discussion #17573431]] :discussion:algorithms:datastructures:javascript:2018:
** [[https://gist.github.com/nadavrot/5b35d44e8ba3dd718e595e40184d03f0][High-Performance Matrix Multiplication]] :algorithms:matrix:multiplication:2018:
** [[https://hackernoon.com/timsort-the-fastest-sorting-algorithm-youve-never-heard-of-36b28417f399][Timsort — the fastest sorting algorithm you’ve never heard of]] :algorithms:sorting:2018:
   The core sorting algorithm in =Python=.
*** [[https://news.ycombinator.com/item?id=17436591][Hackernews Discussion #17436591]] :discussion:algorithms:sorting:2018:
** [[https://play.elevatorsaga.com/][Elevator Saga: The elevator programming game]] :algorithms:javascript:2014:2015:
** [[https://www.snellman.net/blog/archive/2018-07-23-optimizing-breadth-first-search/][Optimizing a breadth-first search]] :algorithms:puzzles:2018:
** [[http://algo.pw/][Algorithm Power]] :algorithms:
   Listing of various algorithms with per-algorithm descriptions and implementations in various languages.
** Books
*** [[https://github.com/mdipierro/nlib][Annotated Algorithms in Python]] :book:algorithms:python:
** Programming Exercises
*** [[https://projecteuler.net/][Project Euler]] 				  :programming:exercise:math:
*** [[http://codewars.com/][Codewars]] 					       :programming:exercise:
*** [[http://exercism.io/][Exercism]] 				    :programming:exercise:opensource:

* Artificial Life
** [[https://codegolf.stackexchange.com/questions/11880/build-a-working-game-of-tetris-in-conways-game-of-life][Build a working game of Tetris in Conway's Game of Life]] :artificial:life:computer:tetris:in:game:of:life:

   #+BEGIN_QUOTE
The underlying idea of this project is abstraction.
Rather than develop a Tetris game in Life directly, we slowly ratcheted up the abstraction in a series of steps.
At each layer, we get further away from the difficulties of Life and closer to the construction of a computer that is as easy to program as any other.
   #+END_QUOTE

   - [[http://www.conwaylife.com/wiki/OTCA_metapixel][OCTA Meta Pixels]] as first level of abstraction
   - [[https://en.wikipedia.org/wiki/Wireworld][Wireworld]] and the [[https://www.quinapalus.com/wi-index.html][Wireworld Computer]] as inspiration


   #+BEGIN_QUOTE
From here we developed an architecture for our processor.
We spent significant effort on designing an architecture that was both as non-esoteric and as easily-implementable as possible.
Whereas the Wireworld computer used a rudimentary transport-triggered architecture, this project uses a much more flexible RISC architecture complete with multiple opcodes and addressing modes.
We created an assembly language, known as QFTASM (Quest for Tetris Assembly), which guided the construction of our processor.
   #+END_QUOTE

** [[http://symbolflux.com/conwayz/][Conwayz—"A new rendition of Conway's vital cellular automaton."]] :artificial:life:game:of:ife:web:explorer:
** [[http://www.conwaylife.com][Conway Life: A community for Conway's Game of Life and reluated cellular automata]] :artificial:life:forum:
*** [[http://www.conwaylife.com/forums/viewtopic.php?t=3303][Elementary Knightship]] :artificial:life:game:of:life:discovery:2018:

    - Elementary :: Cannot be broken down into smaller pieces
    - Knightship :: Glider that moves 2 horizontal and 1 vertical unit in its lifecycle

#+BEGIN_EXAMPLE
x = 31, y = 79, rule = B3/S23
4b2o$4bo2bo$4bo3bo$6b3o$2b2o6b4o$2bob2o4b4o$bo4bo6b3o$2b4o4b2o3bo$o9b
2o$bo3bo$6b3o2b2o2bo$2b2o7bo4bo$13bob2o$10b2o6bo$11b2ob3obo$10b2o3bo2b
o$10bobo2b2o$10bo2bobobo$10b3o6bo$11bobobo3bo$14b2obobo$11bo6b3o2$11bo
9bo$11bo3bo6bo$12bo5b5o$12b3o$16b2o$13b3o2bo$11bob3obo$10bo3bo2bo$11bo
4b2ob3o$13b4obo4b2o$13bob4o4b2o$19bo$20bo2b2o$20b2o$21b5o$25b2o$19b3o
6bo$20bobo3bobo$19bo3bo3bo$19bo3b2o$18bo6bob3o$19b2o3bo3b2o$20b4o2bo2b
o$22b2o3bo$21bo$21b2obo$20bo$19b5o$19bo4bo$18b3ob3o$18bob5o$18bo$20bo$
16bo4b4o$20b4ob2o$17b3o4bo$24bobo$28bo$24bo2b2o$25b3o$22b2o$21b3o5bo$
24b2o2bobo$21bo2b3obobo$22b2obo2bo$24bobo2b2o$26b2o$22b3o4bo$22b3o4bo$
23b2o3b3o$24b2ob2o$25b2o$25bo2$24b2o$26bo!
#+END_EXAMPLE

**** [[https://news.ycombinator.com/item?id=16546152][Hackernews Discussion #16546152]] :2018:
* Build Systems
** [[http://lcgapp.cern.ch/project/architecture/recursive_make.pdf][Recursive Make Considered Harmful]] :build:systems:paper:make:2002:
** [[http://make.mad-scientist.net/papers/rules-of-makefiles/][GNU Make: Rules of Makefiles]] :build:systems:make:2002:
** [[http://nullprogram.com/blog/2017/08/20/][A Tutorial on Portable Makefiles]] :build:systems:portable:make:2017:
** [[http://gittup.org/tup/build_system_rules_and_algorithms.pdf][Build System Rules and Algorithms]] :paper:shal:build:systems:2009:
** [[http://gittup.org/tup/][tup]] :build:systems:tup:shal:reverse:dag:
   #+BEGIN_QUOTE
   In a typical build system, the dependency arrows go down.
   Although this is the way they would naturally go due to gravity, it is unfortunately also where the enemy's gate is.
   This makes it very inefficient and unfriendly.
   In tup, the arrows go up.
   This is obviously true because it rhymes.
   See how the dependencies differ in make and tup:
   #+END_QUOTE

   #+CAPTION: Diagram of Make versus Tup directed graphs
   #+BEGIN_EXAMPLE
            Make                     Tup
            ----                     ---
        hello-world              hello-world
       V           V            ^           ^
     foo.o       bar.o        foo.o        bar.o
    V     V     V     V      ^     ^      ^     ^
   foo.c foo.h bar.c bar.h  foo.c foo.h  bar.h bar.c
   #+END_EXAMPLE

   #+BEGIN_QUOTE
   See the difference? The arrows go up.
   This makes it very fast.
   In fact, in at least one case, tup is optimal.
   See the Build System Rules and Algorithms (PDF) paper for more detailed information.
   #+END_QUOTE

** [[http://bastian.rieck.me/blog/posts/2018/cmake_tips/][Some nice and accurate CMake tips]] :build:systems:cmake:2018:
* Compilers
** GCC
*** [[https://stackoverflow.com/questions/38960763/ftrapv-and-fwrapv-which-is-better-for-efficiency][StackOverflow: "-ftrapv" and "-fwrapv": Which is better for efficiency?]] :compilers:gcc:2016:
    [[https://stackoverflow.com/users/743382/hvd][hvd]] answers:
#+BEGIN_QUOTE
The whole point of both of these options is to give the optimiser less leeway than it normally has.
Therefore, unless you encounter a bug in the optimiser, the fastest should be to use neither, where the optimiser assumes your code doesn't have any overflows and doesn't emit code to handle overflows.

> What what does it mean when the =-ftrapv= definition says it generates "traps?" Does this mean exceptions?

It doesn't mean a C++ exception.
It's target-dependent, but assuming x86, it means the GCC runtime libraries cause =SIGABRT= to be raised that will normally abort your program.
On other platforms, it might use special CPU instructions that cause a hardware exception.
It's mainly useful for debugging purposes and perhaps in a few cases for safety, where the risk of continuing after overflow is greater than the risk of the program suddenly terminating.
#+END_QUOTE
* Concurrency
** [[https://locklessinc.com/articles/locks/][Spinlocks and Read-Write Locks]] :concurrency:c:locks:
** [[http://effbot.org/zone/thread-synchronization.htm][Thread Synchronization Mechanisms in Python]] :concurrency:python:locks:
** [[https://9vx.org/presentations/Spinlocks.pdf][Spinlocks]] :slides:concurrency:locks:2011:
** [[https://eli.thegreenplace.net/2018/basics-of-futexes/][Basics of Futexes]] :blog:concurrency:locks:2018:
*** [[https://news.ycombinator.com/item?id=17524169][Hacker News Discussion #17524169]] :discussion:concurrency:locks:2018:
* Cryptography
** [[https://begriffs.com/posts/2016-11-05-advanced-intro-gnupg.html][Advanced Introduction to GnuPG]] :cryptography:tutorial:gnupg:
** [[https://github.com/gchq/CyberChef][GCHQ CyberChef]] :cryptography:tools:
   Forked on my own github [[https://github.com/merlincorey/CyberChef][merlincorey/CyberChef]].
** [[https://cryptopals.com/][Cryptopals]] :cryptography:ctf:
** [[https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed][StackOverflow: Which hashing algorithm is best for uniqueness and speed?]] :stackoverflow:answers:cryptography:hashing:2013:
** [[http://www.darkside.com.au/snow/][SNOW - Steganographic Nature Of Whitespace with ICE encryption]] :cryptography:steganography:1998:2013:
*** [[https://www.chaoswebs.net/snow10/][Snow10]] :cryptography:steganography:webapp:
*** [[https://secretsigner.com/][Secret Signer]] :cryptography:steganography:webapp:
* Crypto currencies
** [[http://www.righto.com/2014/09/mining-bitcoin-with-pencil-and-paper.html][Mining Bitcoin with pencil and paper: 0.67 hashes per day]] :cryptography:currency:bitcoin:2014:
** [[http://www.righto.com/2014/02/ascii-bernanke-wikileaks-photographs.html][Hidden surprises in the Bitcoin blockchain and how they are stored: Nelson Mandela, Wikileaks, photos, and Python software]] :cryptography:currency:blockchain:creative:hacking:2014:
** [[https://storeofvalue.github.io/posts/cryptocurrency-hacks-so-far-august-24th/][List Of High Profile Cryptocurrency Hacks So Far]] :cryptography:currency:crime:and:theft:2017:
** [[http://www.jsfour.com/can-you-really-hack-ethereum-smart-contracts/][Can you really hack Ethereum smart contracts?]] :cryptography:currency:ethereum:hate:2017:
** [[http://www.michaelburge.us/2017/08/31/roll-your-own-bitcoin-exchange.html][Roll your Own Bitcoin Exchange in Haskell]] :cryptography:currency:exchange:haskell:
** [[https://hackernoon.com/why-everyone-missed-the-most-important-invention-in-the-last-500-years-c90b0151c169][Why Everyone Missed the Most Important Invention in the Last 500 Years]] :cryptography:accounting:triple:entry:bookkeeping:
*** [[https://www.cmu.edu/piper/news/archives/2017/january/yuji-ijiri-obituary.html][Yuji Ijiri's obituary at CMU]]                             :obituary::2017:
#+CAPTION:
#+BEGIN_QUOTE
Former Carnegie Mellon University professor Yuji Ijiri, founder of the transitional momentum accounting practice, also known as triple-entry accounting, died on Jan. 18. He was 81.

Born Feb. 24, 1935, educated and employed as an accountant in his native Japan, Ijiri later adopted the Graduate School of Industrial Administration (GSIA), now the Tepper School of Business, and Carnegie Mellon University as his workplace and home for the final half-century of his life. He earned a Ph.D. in industrial administration at Carnegie Mellon in 1963 and, after four years at the Stanford Graduate School of Business, joined the faculty of GSIA. He remained a central Carnegie Mellon figure from 1967 until his death.

Until his retirement in 2011, Ijiri was the R.M. Trueblood University Professor of Accounting and Economics, emeritus. During his time in this position he collaborated and taught alongside such notables as Nobel laureate Herb Simon, former university president Richard Cyert, global operations and accounting visionary Bill Cooper, Ijiri’s thesis adviser James March, political scientist and co-author of the Behavioral Theory of the Firm, and global economics expert and Federal Reserve historian Allan Meltzer.

“Yuji played an instrumental role in the history of the Tepper School and is considered one of the intellectual giants of his era,” said Robert Dammon, dean of the Tepper School and professor of financial economics, who remembers his own 1984 arrival at the school, meeting the luminaries such as Simon and Ijiri. “Throughout his career, Yuji was an intellectual leader who had tremendous impact on the field of accounting, his colleagues, and the legions of Ph.D. students he worked with over the years. His influence and contributions have left an enduring legacy of research productivity and impact that sets one of the highest standards for academic achievement.”

Ijiri was named to the Accounting Hall of Fame in 1989, an honor afforded just 94 people through its 67-year history at Ohio State University. He authored 200 published papers and 25 books, some translated into Spanish, French and Japanese, but none more important to him than his 1989 work about triple-entry accounting. He was among the founding members of the Journal of Accounting and Public Policy in the early 1980s, as well as the only four-time winner of the American Accounting Association (AAA) Notable Contributions to Accounting Lecturer Award: 1966, 1967, 1971 and 1976. Ijiri served the AAA as vice president in the mid-1970s and president in the 1980s.

Ijiri, by his own description a “constant gardener” in education, once said, “Carnegie Mellon has indeed been ‘small gardens’ of learning blessed with exceptional teachers and students. Yet there seems to be something more. The gardens seem to have a special way of letting people grow.”

Ijiri was 6 years old when he attended the Abacus Math School in Kobe, Japan, and by the 10th grade was doing the bookkeeping for his father’s bakery. In 1952, before even graduating from the Nara High School of Commerce, he passed a test that allowed him to take the CPA examination without a college degree. He passed the CPA exam in 1953, while attending Doshisha Junior College at night. He finished three years at Ritsumeikan University, also in Kyoto, with a bachelor’s of law degree. Thus, he had completed all requirements for a CPA certificate at age 21, the youngest on record in Japan.

He worked at a small accounting firm and then with Price Waterhouse & Co. before leaving in 1959 to attend graduate school at the University of Minnesota, where he received a master’s degree in 1960. From there, he attended Carnegie Mellon, where he remained except for four years at Stanford.

Ijiri also was recognized internationally in accounting for aggregation theory, firm size distributions, accounting measurement theory, computer languages, and quantitative models in business and economics. Fair value accounting in the early 2000s brought his concepts to the forefront again, and among his final papers were works exploring connections between triple-entry accounting and quantum physics and quantum computing. At Carnegie Mellon, his service included academic councils, dean policy advisory and more. He was awarded the Weil Prize for faculty research in 2009-10. Established in 1990, the Yuji Ijiri Award for Excellence in Accounting is awarded to an MBA student during the school’s diploma ceremony each year.

Surviving are his wife of 54 years, Tomoko, of Oberlin, Ohio; and two daughters, Yumi (Oberlin, Ohio) and Lisa (Boston, Massachusetts).
#+END_QUOTE

** [[http://iang.org/papers/triple_entry.html][Triple Entry Accounting - Ian Grigg Systemics, Inc.]]           :paper:2005:
** [[https://blog.keep.network/miners-arent-your-friends-cde9b6e0e9ac?gi=21d51593759c][Miners Aren’t Your Friends: Miners and Consensus: Part 1 of 2]] :cryptography:currency:2018:
** [[https://www.michaelburge.us/2017/11/28/write-your-next-ethereum-contract-in-pyramid-scheme.html][Write your next Ethereum Contract in Pyramid Scheme]] :cryptography:currency:2017:
** [[https://www.michaelburge.us/2018/05/15/ethereum-chess-engine.html][DSLs for Ethereum Contracts]] :cryptography:currency:2018:
** [[https://ethfiddle.com/][EtherFiddle]] :cryptography:currency:ethereum:solidity:ide:
** [[https://ico.red-lang.org/RED-whitepaper.pdf][RED: a full-stack, open-source toolchain for simple smart contracts and decentralized apps development]] :paper:cryptography:currency:smartcontracts:language:2018:
** [[https://medium.com/axoni/axlang-formally-verifiable-smart-contracts-for-the-ethereum-ecosystem-6201203be4e8][AxLang: Formally Verifiable Smart Contracts for the Ethereum Ecosystem]] :cryptography:currency:smartcontracts:language:2018:
** [[https://consensys.github.io/smart-contract-best-practices/security_tools/][Ethereum Smart Contract Best Practices: Static Analysis]] :cryptography:currency:ethereum:smartcontracts:2018:
** [[https://medium.com/loom-network/how-to-secure-your-smart-contracts-6-solidity-vulnerabilities-and-how-to-avoid-them-part-1-c33048d4d17d][How to Secure Your Smart Contracts: 6 Solidity Vulnerabilities and how to avoid them (Part 1)]] :cryptography:currency:ethereum:smartcontracts:2018:
*** [[https://medium.com/loom-network/how-to-secure-your-smart-contracts-6-solidity-vulnerabilities-and-how-to-avoid-them-part-2-730db0aa4834][How to Secure Your Smart Contracts: 6 Solidity Vulnerabilities and how to avoid them (Part 2)]] :cryptography:currency:ethereum:smartcontracts:2018:
** [[https://medium.com/@codetractio/inside-an-ethereum-transaction-fa94ffca912f][Inside an Ethereum transaction]] :cryptography:currency:ethereum:2017:
** [[https://medium.com/@merunasgrincalaitis/how-to-audit-a-smart-contract-most-dangerous-attacks-in-solidity-ae402a7e7868][The ultimate guide to audit a Smart Contract + Most dangerous attacks]] :cryptography:currency:smartcontracts:2017:
** [[https://blog.colony.io/writing-upgradeable-contracts-in-solidity-6743f0eecc88][Writing upgradable contracts in Solidity]] :cryptography:currency:smartcontracts:2018:
** [[https://github.com/ethereum/wiki/wiki/Safety][ethereum wiki: Safety]] :cryptography:currency:smartcontracts:2018:
** [[https://dasp.co/][Decentralized Application Security Project]] :cryptography:currency:smartcontracts:2018:
** [[https://consensys.github.io/smart-contract-best-practices/][Ethereum Smart Contract Security Best Practices]] :cryptography:currency:smartcontracts:2018:
** [[https://github.com/cryptofinlabs/audit-checklist][cryptofinlabs/audit-checklist]]  :github:repository:cryptography:currency:smartcontracts:2018:
** [[https://dappradar.com/][dApp Radar]] :statistics:aggregator:cryptography:currency:2018:
* Datastructures, Databases, and Filesystems
** [[http://www.eelis.net/C++/analogliterals.xhtml][Multi-Dimensional Analog Literals]] :datastructures:analog:literals:2006:
** [[https://www.interviewcake.com/article/python/data-structures-coding-interview][Datastructures for Coding Interviews]]    :datastructures:python:interviews:
** [[http://www.catb.org/esr/structure-packing/][The Lost Art of C Structure Packing]] :datastructures:c:packing:esr:2014:
** [[https://cstack.github.io/db_tutorial/][Let's Build a Simple Database]] :datastructures:databases:c:language:sql:sqlite:
   Writing a sqlite clone from scratch in C
** [[http://use-the-index-luke.com/no-offset][We need tool support for keyset pagination]] :datastructures:databases:sql:pitfall:pagination:offset:
** [[https://www.percona.com/blog/2017/11/15/zfs-from-a-mysql-perspective/][ZFS from a MySQL perspective]] :datastructures:databases:filesystems:mysql:zfs:2017:
** [[https://blog.demofox.org/2017/11/21/floating-point-precision/][Demystifying Floating Point Precision]] :datastructures:floating:point:numbers:2017:
** [[https://norvig.com/design-patterns/design-patterns.pdf][Design Patterns in Dynamic Programming]] :datastructures:design:patterns:norvig:1996:
** [[http://mishadoff.com/blog/clojure-design-patterns/][Clojure Design Patterns]] :datastructures:design:patterns:2017:
** [[https://www.youtube.com/watch?v=T0yzrZL1py0][6.851 MIT Open Courseware - Advanced Datastructures]] :mit:open:courseware:advanced:datastructures:2012:
** [[https://rcoh.me/posts/cache-oblivious-datastructures/][Cache Oblivious Datastructures]] :datastructures:cache:obliious:2017:
** [[https://modern-sql.com/use-case/pivot][SQL Pivot — Rows to Columns]] :databases:sql:pivot:
** [[http://seriot.ch/parsing_json.php][Parsing JSON is a Minefield]] :datastructure:parsing:json:2016:2018:
** [[http://canonical.org/~kragen/memory-models/][The memory models that underlie programming languages]] :datastructures:programming:languages:memory:models:2016:
** [[https://probablydance.com/2018/05/28/a-new-fast-hash-table-in-response-to-googles-new-fast-hash-table/][A new fast hash table in response to Google’s new fast hash table]] :datastructures:hash:table:2018:
*** [[https://github.com/skarupke/flat_hash_map][skarupke/flat_hash_map]] :datastructures:hash:table:2018:
** [[http://db.cs.berkeley.edu/papers/fntdb07-architecture.pdf][Architecture of a Database System]] :paper:databases:architecture:2007:
** [[https://cs.uwaterloo.ca/~plragde/flaneries/FDS/][Functional Data Structures]] :book:datastructures:functional:
** [[https://clemenswinter.com/2018/07/09/how-to-analyze-billions-of-records-per-second-on-a-single-desktop-pc/][How to Analyze Billions of Records per Second on a Single Desktop PC]] :blog:inmemory:databases:2018:
** [[https://adamdrake.com/command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html][Command-line Tools can be 235x Faster than your Hadoop Cluster]] :blog:analytics:performance:2014:
** [[https://adamdrake.com/big-data-small-machine.html][Big Data, Small Machine]] :blog:analytics:performance:2018:
** [[http://traildb.io/][TrailDB]] :databases:events:2014:2018:
** [[http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/][Why you should never use MongoDB]] :databases:nosql:2013:
** [[http://blog.memsql.com/nosql/][Thank You for Your Help NoSQL, but We Got It from Here]] :databases:sql:nosql:2018:
** Alembic
*** [[http://www.chesnok.com/daily/2013/07/02/a-practical-guide-to-using-alembic/][A Practical Guide to using Alembic]] :database:migrations:sqlalchemy:alembic:
*** [[https://www.compose.com/articles/schema-migrations-with-alembic-python-and-postgresql/][Schema Migrations with Alembic, Python, and PostgreSQL]] :databse:migrations:sqlalchemy:alembic:postgres:
** postgres
*** [[http://rhaas.blogspot.com/2018/01/the-state-of-vacuum.html][The State of VACUUM]] :database:postgres:vacuum:2018:
*** [[https://github.com/makmanalp/sqlalchemy-crosstab-postgresql][sqlalchemy-crosstab-postgresql]]
* Development Environments and Editors
** [[https://ecc-comp.blogspot.com/2015/05/a-brief-glance-at-how-5-text-editors.html][A Brief Glance at How Various Text Editors Manage Their Textual Data]] :editors:data:structures:text:representation:2015:
** [[https://blog.d46.us/zsh-tmux-emacs-copy-paste/][ZSH, tmux, Emacs and SSH: A copy-paste story]] :environments:editors:copy:paste:compatibility:
** Emacs
*** [[https://www.emacswiki.org/][Emacs Wiki]] 				       :emacs:xemacs:emacs:lisp:wiki:
*** [[http://orgmode.org/manual/][OrgMode Manual]] 				      :emacs:orgmode:manual:
*** [[http://sachachua.com/blog/2007/12/how-to-use-emacs-org-as-a-basic-day-planner/][How to use Emacs Org as a Basic Day Planner]] :emacs:orgmode:day:planner:2007:
*** [[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][Using org-mode as a Day Planner]] 	:emacs:orgmode:org:day:planner:2007:
*** [[http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html][David O'Toole Org tutorial]] 		:emacs:orgmode:tutorial:todo:agenda:
*** [[http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html][Writing Non-Beamer presentations in org-mode]] :emacs:orgmode:presentations:slides:
*** [[https://portacle.github.io/][Portacle - Portable Common Lisp IDE]]        :emacs:slime:sbcl:common:lisp:
*** [[https://github.com/emacs-helm/helm][helm - Emacs incremental completion and selection narrowing framework]] :emacs:package:incremental:completion:search:
*** [[https://github.com/bbatsov/projectile][projectile - Project Interaction Library for Emacs]] :emacs:package:project:management:
*** [[https://notmuchmail.org/notmuch-emacs/][notmuch for emacs]] 			  :emacs:package:notmuch:integration:
   Searchable and scriptable email in shell and emacs, yes please.
*** [[https://geokon-gh.github.io/.emacs.d/][Emacs configuration for C++/CMake/git]] :emacs:configuration:c:language:integrated:development:environment:explained:
*** [[https://blog.fugue.co/2015-11-11-guide-to-emacs.html][A CEO's Guide to Emacs]] :emacs:configuration:exposition:2015:
*** [[https://github.com/rnkn/fountain-mode][fountain-mode - Emacs major mode for screenwriting in Fountain plaintext markup]] :emacs:package:screenwriting:
*** [[http://howardism.org/Technical/Emacs/literate-devops.html][Literate Devops]] :emacs:orgmode:devops:
**** [[https://www.youtube.com/watch?v=dljNabciEGg][YouTube: Literate Devops]]           :emacs:orgmode:devops:youtube:video:
**** [[https://news.ycombinator.com/item?id=16559004][Hacker News Discussion #16559004]] :discussion:2018:
*** [[https://ambrevar.bitbucket.io/emacs-eshell/][eshell as a main shell]] :emacs:eshell:2017:
*** [[https://www.youtube.com/watch?v=FtieBc3KptU][Emacs for Writers]] :emacs:video:writers:2015:
**** [[https://news.ycombinator.com/item?id=17048907][Hackernews Discussion #17048907]] :2018:
**** [[https://github.com/incandescentman/Emacs-Settings][incandescentman/Emacs-Settings]] :emacs:configuration:
*** [[https://github.com/melling/EditorNotes/blob/master/emacs.org][melling/EditorNotes: Emacs]] :emacs:writers:
*** [[http://nullprogram.com/blog/2018/05/31/][Emacs 26 Brings Generators and Threads]]               :emacs:threads:2018:
*** [[http://www.sastibe.de/2018/05/2018-05-11-emacs-org-mode-rest-apis-stocks/][Use Emacs Org Mode and REST APIs for an up-to-date Stock Portfolio]] :emacs:orgmode:2018:
*** [[http://tuhdo.github.io/c-ide.html][C/C++ Development Environment for Emacs]] :emacs:c:cplusplus:2015:
*** Packages
**** [[https://github.com/pashky/restclient.el][pashky/restclient]]                         :emacs:package:rest:2016:2018:
**** [[https://projectile.readthedocs.io/en/latest/][ReadTheDocs: projectile]]                                  :emacs:package:
***** [[http://astronautradio.com/post/152934998548/open-a-terminal-with-projectile-in-emacs][Open a terminal with projectile in emacs]] :emacs:package:2017:
#+CAPTION: Function to make reusable ansi-term
#+BEGIN_SRC  elisp
;; Enable Projectile globally
(projectile-global-mode)

(defun projectile-term ()
  "Create an ansi-term at the project root"
  (interactive)
  (let ((root (projectile-project-root))
  (buff-name (concat " [term] " (projectile-project-root))))
    (if (get-buffer buff-name)
      (switch-to-buffer-other-window buff-name)
      (progn
      (split-window-sensibly (selected-window))
      (other-window 1)
      (setq default-directory root)
      (ansi-term (getenv "SHELL"))
      (rename-buffer buff-name t)))))

(global-set-key (kbd "C-x M-t") 'projectile-term)
#+END_SRC
*** Kanban
**** [[http://agilesoc.com/2011/08/08/emacs-org-mode-kanban-pomodoro-oh-my/][Emacs, org-mode, Kanban, Pomodoro... Oh my...]] :emacs:orgmode:kanban:2011:
**** [[http://www.draketo.de/light/english/free-software/el-kanban-org-table][El Kanban Org: parse org-mode todo-states to use org-tables as Kanban tables]] :emacs:orgmode:kanban:2012:
**** [[http://jr0cket.co.uk/2016/09/Kanban-board-Emacs-Org-mode-to-get-work-done.html][Kanban in Emacs Org-Mode to Get More Work Done]] :emacs:orgmode:kanban:2016:
**** [[http://www.starnix.se/kanban-workflow-with-emacs-and-org-mode/][Kanban workflow with Emacs, and org-mode]]     :emacs:orgmode:kanban:2017:
**** [[https://github.com/hagmonk/org-kanban][Github: hagmonk/org-kanban]]              :emacs:orgmode:kanban:2017:2018:
**** [[https://github.com/gizmomogwai/org-kanban][Github: gizmomogwai/org-kanban]]          :emacs:orgmode:kanban:2016:2018:
* Emulators and Game Consoles
** [[http://www.codeslinger.co.uk/pages/basics.html][codeslinger Emulation Basics]] :emulator:2008:
*** [[http://www.codeslinger.co.uk/files/emu.pdf][Study of the techniques for emulation programming]] :paper:emulation:2001:
*** [[http://www.codeslinger.co.uk/pages/projects/chip8.html][codeslinger chip8 emulator]] :emulator:chip8:2008:
** [[http://www.emulator101.com/][Emulator 101]] :emulator:arcade:tutorial:2016:
*** [[https://news.ycombinator.com/item?id=17608619][Hacker News Discussion #17608619]] :discussion:emulator:arcade:tutorial:2016:
** [[https://problemkaputt.de/gbatek.htm][GBATek - Gameboy Advance / Nintendo DS / DSi - Technical Info]] :nintendo:gameboy:nintendo:dsi:documentation:
** Nintendo Entertainment System
*** [[https://github.com/blanham/ChickeNES][blanham/ChickeNES]] :nintendo:entertainment:system:emulator:c:2013:2015:
*** [[https://medium.com/@fogleman/i-made-an-nes-emulator-here-s-what-i-learned-about-the-original-nintendo-2e078c9b28fe][I made an NES emulator. Here’s what I learned about the original Nintendo.]] :nintendo:entertainment:system:emulator:2015:
**** [[https://github.com/fogleman/nes][fogleman/nes]] :nintendo:entertainment:system:emulator:golang:2015:2018:
*** [[http://yizhang82.me/nes-emu-overview][Writing your own NES emulator - overview]] :nintendo:entertainment:system:emulator:cpp:2018:
**** [[https://github.com/yizhang82/neschan][yizhang82/neschan]] :nitendo:entertainment:system:emulator:cpp:2018:
*** [[https://nesdoug.com/][How to Program an NES game in C]] :programming:nintendo:entertainment:system:2017:
*** [[https://tedium.co/2018/04/10/nes-homebrew-scene-history/][The strange and wonderful world of homebrew games for the original Nintendo Entertainment System.]] :nintendo:entertainment:system:homebrew:2018:
*** [[https://www.moria.us/blog/2018/03/nes-development][NES Development Day 1: Creating a ROM]] :nintendo:entertainment:system:rom:programming:2018:
*** [[https://wiki.nesdev.com/][NES Dev Wiki]] :nintendo:entertainment:system:dev:wiki:
** Nintendo Gameboy
*** [[http://marc.rawer.de/Gameboy/Docs/GBCPUman.pdf][Game Boy CPU Manual]] :nintendo:gameboy:manual:
*** [[http://gbdev.gg8.se/wiki/][Gameboy Dev Wiki]]                                  :nintendo:gameboy:wiki:
**** [[http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware][Gameboy Dev Wiki: Gameboy sound hardware]]        :nintendo:gameboy:sound:
*** [[http://bgb.bircd.org/pandocs.htm][PANDOCS: Everything You Always Wanted to Know about GAMEBOY]] :nintendo:gameboy:documentation:2001:
*** [[http://gbdev.gg8.se/files/roms/blargg-gb-tests/][Blargg's Gameboy Tests]] :nintendo:gameboy:test:suite:2013:
*** [[https://github.com/djhworld/gomeboycolor][djhworld/gomeboycolor]] :nintendo:gameboy:emulator:golang:2013:
*** [[https://www.youtube.com/watch?v=HyzD8pNlpwI][The Ultimate Game Boy Talk (33c3)]]           :video:nintendo:gameboy:2016:
*** [[http://blog.rekawek.eu/2017/02/09/coffee-gb/][Why did I spend 1.5 months creating a Gameboy emulator?]] :nintendo:gameboy:emulator:java:2017:
**** [[https://github.com/trekawek/coffee-gb/][trekawek/coffee-gb]] :nintendo:gameboy:emulator:java:2017:

* Free Books (TODO: REMOVE)
  Books can be categorized by tags to generate a general Books section/page.
** [[https://softwarefoundations.cis.upenn.edu/][Software Foundations Series (books)]] :books:logic:math:computer:science:proofs:coq:
** [[http://adam.chlipala.net/cpdt/][Certified Programming with Dependent Types]] :book:logic:types:proofs:coq:2017:
* Great Talks
** [[https://www.youtube.com/watch?v=Sg4U4r_AgJU][Brian Kernighan - How to succeed at language design without really trying]] :talk:kernighan:language:design:awk:

    Mentions Alan Perlis' [[http://www.cs.yale.edu/homes/perlis-alan/quotes.html][Epigrams in Programming]]

** [[https://www.youtube.com/watch?v=O3tVctB_VSU][Gerald Sussman - We Don't Really Know how to Compute]] :talk:sussman:computation:

** [[https://www.youtube.com/watch?v=OyfBQmvr2Hc][William Byrd - The Most Beautiful Program Ever Written]] :talk:byrd:interpreters:provers:solvers:minikanren:

   The first half is an overview of Scheme and writing an interpreter in scheme.
   The second half goes into using an advanced interpreter along with logic programming in minikanren to find programs that match test constraints.

** [[https://www.youtube.com/watch?v=Jib2AmRb_rk&app=desktop][SQLite: The Database at the Edge of the Network with Dr. Richard Hipp]] :talk:hipp:database:sqlite:
** [[https://www.youtube.com/watch?v=_gZK0tW8EhQ][Ron Garret - The Remote Agent Experiment: Debugging Code from 60 Million Miles Away]] :talk:garret:lisp:in:space:
** [[http://dtrace.org/blogs/bmc/2018/02/03/talks/][Brian Cantril talks]]
** Rich Hickey
   Creator of Clojure known for many great talks.
*** [[http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey][Are we there yet?]] 				 :talk:hickey:clojure:design:
*** [[http://www.youtube.com/watch?v=f84n5oFoZBc][Hammock Driven Development]] :talk:hickey:design:
*** [[http://www.infoq.com/presentations/Simple-Made-Easy][Simple Made Easy]] :talk:hickey:complexity:
*** [[http://www.infoq.com/presentations/Value-Values][The Value of Values]] :talk:hickey:
*** [[http://www.youtube.com/watch?v=ROor6_NGIWU][The Language of the System]] :talk:hickey:distrubuted:language:design:
*** [[http://www.infoq.com/presentations/Design-Composition-Performance][Design, Composition, and Performance]] :talk:hickey:
*** [[https://www.youtube.com/watch?v=2V1FtfBDsLU][Effective Programs - 10 Years of Clojure - Rich Hickey]] :talk:hickey:effectiveness:2017:
** Pycon
*** [[https://www.youtube.com/watch?v=ZzfHjytDceU][Keynote David Beazley - Topics of Interest (Python Asyncio)]] :pycon:brazil:2015:
* Frontend Web Design
** [[http://flexboxfroggy.com/][CSS Flexbox Froggy]] :css:flexbox:tutorial:game:
** [[http://cssgridgarden.com/][CSS Grid Garden]] :css:grid:tutorial:game:
** [[https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886][7 Practical Tips for Cheating at Design]] :ui:design:tips:
*** Use color and weight to create hierarchy instead of size
    - Try using color or font weight to do the same job to differentiate importantness
    - Stay away from font weights under 400 for UI work
*** Don't use grey text on colored backgrounds
    1. Reduce the opacity of white text
    2. Hand-pick a color that's base don the background color
***  Offset your shadows
    - [[https://material.io/guidelines/material-design/elevation-shadows.html][Material Design: Elevation and Shadows]]
*** Use fewer borders
    1. Use a box shadow
    2. Use two different background colors
    3. Add extra spacing
*** Don't blow up icons that are meant to be small
*** Use accent borders to add color to a bland design
*** Not every button needs a background color
** [[https://dribbble.com/][Dribbble - Design Ideas]] :design:
*** [[https://dribbble.com/colors][Dribbble: Browse by Colors]] :color:design:
** [[https://hacks.mozilla.org/2018/03/how-to-write-css-that-works-in-every-browser-even-the-old-ones/][Resilient CSS: How to Write CSS That Works in Every Browser, Even the Old Ones]] :2018:
*** [[https://news.ycombinator.com/item?id=16546725][Hacker News discussion #16546725]]
#+CAPTION: ausjke 6 hours ago
#+BEGIN_QUOTE
1. CSS and HTML are extremely resilient, they ignore your typos and unsupported features gracefully and never crash, so just daring to use them in your code, no need for exception handling comparing to JS, in that sense, if you can do it in CSS, avoid JS.

2. Leverage CSS override

3. Use browser devtools to test all browsers. No need install all older browser to check CSS. icanuse helps greatly too.

4. Use feature-queries for CSS.

These indeed can make your CSS code work for both the stone age and hottest browsers, all at the same time, without much hacking. Great videos.
#+END_QUOTE

*** [[https://www.youtube.com/watch?v=u00FY9vADfQ][Introduction to Resilient CSS – 1/7]] :video:9:minutes:2018:
*** [[https://www.youtube.com/watch?v=WM_cKHH7bZ0][The Secrets of ‘Can I Use’ – 2/7 Resilient CSS]] :video:10:minutes:2018:
*** [[https://www.youtube.com/watch?v=NJjlzxud4_M][How Browsers Handle Errors in CSS – 3/7 Resilient CSS]] :video:7:minutes:2018:
*** [[https://www.youtube.com/watch?v=0X6zrW2QW8Q][Unlocking the Power of CSS Overrides – 4/7 Resilient CSS]] :video:8:minutes:2018:
*** [[https://www.youtube.com/watch?v=T8uxmUQZsck][The Magic of Feature Queries, Part 1 – 5/7 Resilient CSS]] :video:9:minutes:2018:
*** [[https://www.youtube.com/watch?v=7y-xfxC2jGA][The Magic of Feature Queries, Part 2 – 6/7 Resilient CSS]] :video:5:minutes:2018:
*** [[https://www.youtube.com/watch?v=X3xvMKgtB-c][Making Your CSS Fail Excellently – 7/7 Resilient CSS]] :video:5:minutes:2018:
** [[http://enderjs.com/][EnderJS - The no library library]] :javascript:browser:2018:
** [[http://tachyons.io/][Tachyons - Responsive CSS framework]] :css:framework:
** [[http://getbem.com/][BEM - Block Element Modifier]] :css:methodology:
** [[https://hackernoon.com/how-css-grid-beats-bootstrap-85d5881cf163][Why CSS Grid is better than Bootstrap for creating layouts]] :article:css:layout:2017:
** [[https://www.sitepoint.com/css-grid-layout-vs-css-frameworks-debate/][The CSS Grid Layout vs CSS Frameworks Debate]]     :article:css:layout:2018:
*** [[https://scrimba.com/g/gR8PTE][Learn CSS Grid for free]] :video:course:css:layout:2017:2018:
*** [[https://medium.freecodecamp.org/heres-my-free-css-grid-course-merry-christmas-3826dd24f098][Want to learn CSS Grid? Here’s my free full-length course. Merry Christmas!]] :course:css:layout:2017:
** [[https://foundation.zurb.com/][Foundation: The most advanced responsive front-end framework in the world.]] :css:framework:responsive:2018:
** [[https://zurb.com/blog/foundation-css-grid-think-beyond-the-page][Foundation & CSS Grid]]                            :blog:css:framework:2018:
** [[https://vuejs.org/][VueJS: a progressive framework for building user interfaces.]] :javascript:ui:framework:2018:
** [[https://www.layoutit.com/grid][Layout It! CSS Grid Fiddle]] :css:grid:2018:
** [[https://cssgrid.cc/][The CSS Grid]] :css:grid:2018:
** [[https://pxlnv.com/blog/bullshit-web/][The Bullshit Web]] :article:css:2018:
* Functional Programming
** [[https://chriskohlhepp.wordpress.com/functional-programming-section/metacircular-adventures-in-functional-abstraction-challenging-clojure-in-common-lisp/][Metacircular Adventures in Functional Abstraction]] :functional:programming:common:lisp:clojure:
** [[https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome][Clojure from the ground up]] :functional:programming:clojure:
** [[http://eli.thegreenplace.net/2017/reducers-transducers-and-coreasync-in-clojure/][Reducers, transducers, and core.async in clojure]] :functional:programming:clojure:
** [[http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html][Functors, Applicatives, And Monads In Pictures]] :functional:programming:functors:monads:visualizations:
** [[https://patrickmn.com/software/the-haskell-pyramid/][The Haskell Pyramid]] :functional:programming:haskell:
** [[https://mostly-adequate.gitbooks.io/mostly-adequate-guide/][Professor Frisby's Mostly Adequate Guide to Functional Programming]] :book:functional:programming:javascript:
* Game Development
** [[https://www.haroldserrano.com/blog/books-i-used-to-develop-a-game-engine][Books I had to read to develop a game engine]] :game:development:game:engine:2018:
** [[http://www.helixsoft.nl/articles/circle/sincos.htm][Sin & Cos: The Programmer's Pals!]] :game:development:mathematics:trigonometry:
*** Conclusion
#+BEGIN_QUOTE
In this article I set out to answer some of the most common questions on sine and cosine, or trigonometry in general.
I could give you a more mathematical explanation of sine and cosine, but I wanted this article to be of practical use to game programmers, especially to Allegro game programmers, not to give an encyclopedic description of abstract mathematics.
I hope that this has been of some use to you, my dear reader.
Please send me an e-mail if you have something to say about this article, whether you like it, dislike it, find it useful, or just want to say hi.
If you have any questions you can ask them on the forums at http://www.allegro.cc.
It is very likely that I'll see it there.
And if you ever write an effect in a demo or game using the explanations in this article, I would very much like to see the result.

Amarillion
E-mail: amarillion@yahoo.com
Home page: http://www.helixsoft.nl/
#+END_QUOTE
** [[https://allarsblog.com/2018/03/16/confessions-of-an-unreal-engine-4-engineering-firefighter/][Confessions of an Unreal Engine 4 Engineering Firefighter]] :game:development:unreal:engine:fire:fighting:2018:
** [[https://www.gamasutra.com/view/feature/131503/1500_archers_on_a_288_network_.php?print=1][1500 Archers on a 28.8: Network Programming in Age of Empires and Beyond]] :game:development:network:2018:
* Game Theory
** [[http://www.chesstactics.org/index.php?Type=page&Action=next&From=1,1,1,1][Ward Farnsworth's Predator at the Chessboard]] :gametheory:book:chess:
** [[http://www.mindsports.nl/][mindsports.nl]] :gametheory:gamedesign:puzzles:
* Graphics
** [[http://www.extentofthejam.com/pseudo/][Lou's Psuedo 3d Page]] :graphics:3d:rendering:
** [[http://machinethink.net/blog/3d-rendering-without-shaders/][3D Rendering without shaders]] :graphics:3d:rendering:shaders:

   [[https://news.ycombinator.com/item?id=13448047][Hackernews discussion]] with some interesting discourse and links such as [[https://fgiesen.wordpress.com/2013/02/06/the-barycentric-conspirac/][The Barycentric Conspiracy]].

** [[https://www.fasterthan.life/blog/2017/7/11/i-am-graphics-and-so-can-you-part-1][I Am Graphics And So Can You]] 	       :graphics:3d:rendering:vulkan:
** [[http://iquilezles.org/www/index.htm][Íñigo Quílez' Demo and Shader Graphics Articles]] :graphics:demo:scene:shaders:
** [[https://www.impulseadventure.com/photo/jpeg-huffman-coding.html][JPEG Huffman Coding Tutorial]] :graphics:compression:images:2010:
* Hardware
** [[https://jaycarlson.net/microcontrollers/][The Amazing $1 Microcontroller]]

   Exploration of 21 different microcontrollers each costing less than $1 to help familiarize oneself with all the major ecosystems out there.

   #+BEGIN_QUOTE
While some projects that come across my desk are complex enough to require a hundreds-of-MHz microcontroller with all the bells and whistles, it’s amazing how many projects work great using nothing more than a $1 chip — so this is the only rule I established for the shoot-out. 1

I wanted to explore the $1 pricing zone specifically because it’s the least amount of money you can spend on an MCU that’s still general-purpose enough to be widely useful in a diverse array of projects.

Any cheaper, and you end up with 6- or 8-pin parts with only a few dozen bytes of RAM, no ADC, nor any peripherals other than a single timer and some GPIO.

Any more expensive, and the field completely opens up to an overwhelming number of parts — all with heavily-specialized peripherals and connectivity options.

These MCUs were selected to represent their entire families — or sub-families, depending on the architecture — and in my analysis, I’ll offer some information about the family as a whole.

If you want to scroll down and find out who the winner is, don’t bother — there’s really no sense in trying to declare the “king of $1 MCUs” as everyone knows the best microcontroller is the one that best matches your application needs. I mean, everyone knows the best microcontroller is the one you already know how to use. No, wait — the best microcontroller is definitely the one that is easiest to prototype with. Or maybe that has the lowest impact on BOM pricing?

I can’t even decide on the criteria for the best microcontroller — let alone crown a winner.

What I will do, however, is offer a ton of different recommendations for different users at the end. Read on!
   #+END_QUOTE
** [[http://www.righto.com/2018/03/implementing-fizzbuzz-on-fpga.html][Implementing Fizbuzz on an FPGA]] :2018:
** [[http://www.gleech.org/first-computers/][Disambiguating the first computer]] :hardware:history:
** [[http://www.frantone.com/designwritings/design_writings.html][Fran's Writings on Design and Engineering]] :hardware:electricalengineering:2011:2015:
*** [[https://www.youtube.com/franblanche][Fran Blanche Youtube Channel]] :video:electricalengineering:2011:2018:
** [[https://www.falstad.com/circuit/circuitjs.html][Circuit Simulator]] :electricalengineering:simulation:2018:
*** [[https://github.com/sharpie7/circuitjs1][Github: sharpie7/circuitjs1]] :repository:electricalengineering:simulation:2015:2018:
* Home Automation and Internet of Things
** [[http://www.bruhautomation.com/][Bruh Automation]] :home:automation:tutorials:reviews:

   Lots of resources including their [[https://github.com/bruhautomation][github]] for various home automation things.

*** [[https://www.youtube.com/watch?v=9KI36GTgwuQ][The BEST Digital LED Strip Light Tutorial - DIY, WIFI-Controllable via ESP, MQTT, and Home Assistant]] :home:automation:led:strip:mqtt:2016:

** [[https://github.com/adi0x90/attifyos][Attify OS - Distro for pentesting IoT devices]]
* Locksmithery and Lockpickery

** [[https://www.defcon.org/images/defcon-21/dc-21-presentations/Tobias-Bluzmanis/DEFCON-21-Tobias-Bluzmanis-Insecurity-A-Failure-of-Imagination.pdf][A FAILURE OF IMAGINATION: Kwikset Smartkey® and Insecurity Engineering]] :physical:security:lockpicking:kwikset:smart:key:

* Machine Learning
** [[http://www.asimovinstitute.org/neural-network-zoo/][The Neural Network Zoo]]                        :machine:learning:neural:networks:
** [[https://docs.google.com/presentation/d/1kSuQyW5DTnkVaZEjGYCkfOxvzCqGEFzWBy4e9Uedd9k/preview?imm_mid=0f9b7e&cmp=em-data-na-na-newsltr_20171213#slide=id.g168a3288f7_0_58][Machine Learning 101]]                        :machine:learning:slides:2017:
** [[https://developers.google.com/machine-learning/crash-course/][Google Machine Learning: Crash Course]]      :machine:learning:crash:course:
** [[https://developers.google.com/machine-learning/guides/][Google Machine Learning Guides]]             :machine:learning:guide:2018:
*** [[https://developers.google.com/machine-learning/guides/rules-of-ml][Google Machine Learning Guides: Rules of Machine Learning]] :machine:learning:guide:2018:
*** [[https://developers.google.com/machine-learning/guides/text-classification/][Google Machine Learning Guides: Text Classification]]  :machine:learning:guide:2018:
** [[https://github.com/glouw/tinn][glouw/tinn]] :machine:learning:neural:network:library:
   The tiny neural network library
** [[https://sandipanweb.wordpress.com/2018/05/31/8626/][Few Machine Learning Problems (with Python implementations)]] :machine:learning:neural:networks:2018:
** [[https://thegradient.pub/why-rl-is-flawed/][Reinforcement learning's foundational flaw]] :machine:learning:reinforcement:2018:
*** [[https://thegradient.pub/how-to-fix-rl/][How to fix reinforcement learning]] :machine:learning:reinforcement:2018:
* Mazes

** [[http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap][Maze Generation Algorithm Recap]] :maze:algorithms:

Nice recap of maze generation algorithms from a minecraft modder.  Check out his [[http://jamisbuck.org/mazes/minecraft.html][minecraft maze generator]].

* Networking
** [[https://www.nanog.org/sites/default/files/2_Steenbergen_Tutor][Everything You Always Wanted to Know About Optical Networking – But Were Afraid to Ask]] :networking:optical:fiber:2017:
** [[http://beej.us/guide/bgnet/][Beej's Guide to Network Programming]] :networking:programming:c:unix:sockets:beejs:guide:
   Famous and extensive introductory text to programming with unix sockets.  Only really touches on simple synchronous socket servers for the most part.

   *TODO* - recategorize as their own links
   See also:
   - [[http://beej.us/guide/bgc/][Beej's Guide to C Programming]]
   - [[http://beej.us/guide/bgipc/][Beej's Guide to Unix Interprocess Communication]]
   - [[http://beej.us/guide/bggdb/][Beej's Quick Guide to GDB]]
** [[https://modern.ircdocs.horse/][Modern IRC Client Protocol]] :networking:protocol:living:documentation:irc:
** [[https://coldfix.eu/2017/01/29/vpn-box/][VPN in a Nutshell]] :networking:linux:vpn:per:application:
** [[https://fgiesen.wordpress.com/2018/01/20/network-latencies-and-speed-of-light/][Network latencies and the speed of light]] :networking:physics:2018:
** [[https://www.ibiblio.org/harris/500milemail.html][The case of the 500 mile long email]] :networking:physics:statistics:
** [[http://networkdiagram101.com/][16 Tips to Better Network Diagrams]] :networking:diagrams:
** [[https://arxiv.org/abs/1103.0463][Fitting Square Pegs Through Round Pipes: Unordered Delivery Wire-Compatible with TCP and TLS]] :networking:protocols:minion:2011:
** [[https://tools.ietf.org/html/draft-iyengar-minion-protocol-01][Minion - Wire Protocol]] :paper:networking:protocols:minion:2013:
** [[http://ieeexplore.ieee.org/document/7497221/][TCP Hollywood]] :networking:protocols:2016:
** [[https://www.schoenitzer.de/blog/2018/Linux%20Raw%20Sockets.html][Linux Raw Sockets]] :networking:raw:sockets:linux:2018:
** [[https://startyourownisp.com/][Start your own (wireless) ISP]] :networking:wisp:2018:
** [[https://www.fastly.com/blog/headers-we-dont-want][The headers we don't want]] :networking:http:headers:2018:
*** [[https://news.ycombinator.com/item?id=17074721][Hacker News Discussion #17074721]]                                   :2018:
**** Importance of Via
#+CAPTION: buro9 on via
#+BEGIN_QUOTE
Via is not safe to remove and Fastly know this as well as Akamai, Cloudflare and others.

A very cheap attack is to chain CDNs into a nice circle. This is what Via protects against: https://blog.cloudflare.com/preventing-malicious-request-loops/

Just because a browser doesn't use a header does not make the header superfluous.
#+END_QUOTE
**** Expires tricks
#+CAPTION: justinsaccount on expires
#+BEGIN_QUOTE

cache-control doesn't completely replace Expires for some use cases.

If you have a scheduled task that generates data every hour, you can set Expires accordingly so all clients will refresh the data as soon as the hour rolls over.

You can do this using max-age but then you have to dynamically calculate this header per request which means you can't do things like upload your data to s3 and set the cache-control header on it.

With expires, I can upload a file to s3 and set

    Expires: ... 17:00

and then not have to touch it again for an hour.

you can work around this client side with per hour filenames or the other usual cache busting tricks, but that's annoying.
#+END_QUO
** [[http://www.computerhistory.org/atchm/the-two-napkin-protocol/][The Two-Napkin Protocol]] :networking:bgp:history:1989:2018:
** [[https://www.jmarshall.com/easy/http/][HTTP Made Really Easy]] :networking:http:2012:
** [[https://blog.benjojo.co.uk/post/bgp-battleships][Playing battleships over BGP]] :networking:bgp:games:2018:
*** [[https://github.com/benjojo/bgp-battleships][benjoho/bgp-battleships]] :github:networking:bgp:games:2018:
*** [[https://www.reddit.com/r/networking/comments/8lds0e/playing_battleship_over_bgp/][/r/networking/Playing Battleship over BGP]] :discussion:networking:bgp:games:2018:
** [[https://mailman.nanog.org/pipermail/nanog/2018-June/095728.html][Broadcom vs Mellanox based platforms: 100 Gbps networking]] :networking:performance:2018:
** [[http://napalm.readthedocs.io/en/latest/][NAPALM (Network Automation and Programmability Abstraction Layer with Multivendor support)]] :networking:python:2018:
** [[https://www.cambus.net/oldest-domains-in-the-com-net-and-org-tlds/][Oldest domains in the .com, .net, and .org TLDs]] :networking:history:dns:2018:
** [[http://www.analog.com/en/education/education-library/software-defined-radio-for-engineers.html][Software-Defined Radio for Engineers, 2018]] :book:networking:sdr:2018:
** [[https://jvns.ca/blog/2018/07/24/ip-addresses-routing/][IP addresses & routing]] :article:networking:routing:2018:
*** [[https://news.ycombinator.com/item?id=17607845][Hacker News Discussion #17607845]] :discussion:article:networking:routing:2018:
* Object Oriented Programming and Design
** [[https://ericlippert.com/2015/04/27/wizards-and-warriors-part-one/][Wizards and Warriors: Part One]] :object:oriented:design:
*** [[https://ericlippert.com/2015/04/30/wizards-and-warriors-part-two/][Wizards and Warriors: Part Two]] :object:oriented:design:
*** [[https://ericlippert.com/2015/05/04/wizards-and-warriors-part-three/][Wizards and Warriors: Part Three]] :object:oriented:design:
*** [[https://ericlippert.com/2015/05/07/wizards-and-warriors-part-four/][Wizards and Warriors: Part Four]] :object:oriented:design:
*** [[https://ericlippert.com/2015/05/11/wizards-and-warriors-part-five/][Wizards and Warriors: Part Five]] :object:oriented:design:
* Open Source
** [[https://www.rainloop.net/downloads/][Rainloop webmail]]                                       :oss:php:mail:2018:
** [[https://github.com/usefathom/fathom][Github: usefathom/fathom]] :oss:repository:golang:analytics:2018:
** [[https://matomo.org/][Matomo: Open analytics platform]] :oss:php:analytics:2018:
   Formerly ~PIWIK~, free Google Analytics-like platform.
* Operating Systems
** [[http://greenteapress.com/thinkos/thinkos.pdf][Think OS: A Brief Introduction to Operating Systems]] :operating:systems:2015:
* Papers
** [[https://www.theatlantic.com/magazine/archive/1945/07/as-we-may-think/303881/][As We May Think]] 						 :paper:1945:

    Some musings on hypertext and what we might build after the conclusion of World War II.

** [[http://math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf][A Mathematical Theory of Communication]] 	      :paper:shannon:networking:1948:
    Defines the term "bit" for Binary digIT.
** [[http://netlab.cs.ucla.edu/wiki/files/shannon1949.pdf][Communication Theory of Secrecy Systems]] :paper:shannon:cryptography:1949:
*** [[http://www.cs.haifa.ac.il/~orrd/IntroToCrypto/Spring11/Lecture2.pdf][Shannon's Theory of Secrecy Systems]] :slides:cryptography:2011:
** [[https://www.csee.umbc.edu/courses/471/papers/turing.pdf][Computing Machinery and Intelligence]] :paper:turing:artificial:intelligence:1950:
** [[https://ia801903.us.archive.org/1/items/bstj29-2-147/bstj29-2-147.pdf][Error Detecting and Error Correcting Codes]] 		 :paper:hamming:1950:

** [[http://www-formal.stanford.edu/jmc/recursive.html][Recursive Functions of Symbolic Expressions and their Computation by Machine]] :paper:mccarthy:lisp:1960:
** [[http://www.melconway.com/Home/Committees_Paper.html][How do Committees Invent]] 		     :paper:design:organization:1968:
    Apparently this some of the inspiration for Mythical Man Month.
** [[https://www-ee.stanford.edu/~hellman/publications/24.pdf][New Directions in Cryptography]]    :paper:cryptography:diffie:hellman:1976:
** [[http://amturing.acm.org/p558-lamport.pdf][Time, Clocks, and the Ordering of Events in a Distributed System]] :paper:distributed:1978:
** [[http://fermatslibrary.com/s/reflections-on-trusting-trust][Reflections on Trusting Trust]] 	     :paper:security:trust:unix:1984:
** [[https://www.student.cs.uwaterloo.ca/~cs492/11public_html/p18-smith.pdf][The Limits of Corrrectness]] 					 :paper:1985:
** [[http://www.usingcsp.com/cspbook.pdf][Communicating Sequential Processes]] 		      :paper:concurrent:1985:
** [[http://cseweb.ucsd.edu/~ravir/274/15/papers/p143-kajiya.pdf][The Rendering Equation]] 	     :paper:graphics:rendering:pipeline:1986:
** [[http://www.wisdom.weizmann.ac.il/~harel/papers/Statecharts.pdf][StateCharts: A Visual Formalism for Complex Systems]] :paper:state:machine:1987:
*** [[https://www.slideshare.net/lmatteis/are-statecharts-the-next-big-ui-paradigm][Are statecharts the next big UI paradigm?]] :blog:post:statemachine:2017:
** [[http://fermatslibrary.com/s/a-sample-of-brilliance][A Sample of Brilliance]] 		     :paper:randomness:sampling:1987:
** [[http://www.wisdom.weizmann.ac.il/~harel/SCANNED.PAPERS/VisualFormalisms.pdf][On Visual Formalisms]] :paper:state:machine:1988:
** [[https://www.finseth.com/craft/][A Cookbook for an Emacs]] 				   :paper:emacs:1991:
** [[http://home.pipeline.com/~hbaker1/CheneyMTA.html][CONS Should Not CONS Its Arguments, Part II: Cheney on the M.T.A.]] :paper:lisp:scheme:tail:recursion:c:1994:
** [[https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/state-lasc.pdf][State in Haskell]] 				   :paper:haskell:state:1995:
** [[https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf][Purely Functional Data Structures]] :paper:functional:programming:data:structures:1996:
** [[https://www.cs.cmu.edu/~fp/courses/15317-f00/handouts/logic.pdf][Constructive Logic]] 					   :paper:logic:2000:
** [[http://erlang.org/download/armstrong_thesis_2003.pdf][Making Reliable Distributed Systems in the Presence of Software Errors]] :paper:distributed:systems:2003:
** [[https://github.com/papers-we-love/papers-we-love/blob/master/design/out-of-the-tar-pit.pdf][Out of the Tarpit]] 			       :paper:design:complexity:2006:
** [[http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf][Dynamo: Amazon’s Highly Available Key-value Store]] :paper:distrubted:database:dynamodb:2007:
** [[https://bitcoin.org/bitcoin.pdf][Bitcoin: A Peer-to-Peer Electronic Cash System]] :paper:cryptography:currency:bitcoin:2008:
** [[http://www.diku.dk/hjemmesider/ansatte/henglein/papers/henglein2011a.pdf][Generic Top-down Discrimination for Sorting and Partitioning in Linear Time]] :paper:sorting:2010:
**** [[http://www.diku.dk/hjemmesider/ansatte/henglein/papers/henglein2011c.pdf][Generic Multiset Programming with Discrimination-based Joins and Symbolic Cartesian Products]] :paper:sorting:2011:
** [[https://raft.github.io/raft.pdf][In Search of an Understandable Consensus Algorithm]] :paper:distributed:consenus:2014:

* Physics
** [[https://www.susanjfowler.com/blog/2016/8/13/so-you-want-to-learn-physics][So You Want to Learn Physics...]] :physics:susan:flower:2016:
** [[https://physicstravelguide.com/][Physics Travel Guides]] :physics:study:tool:

** [[https://landgreen.github.io/physics/index.html][Physics Course Notes with Simulations]] :physics:course:javascript:simulations:2018:
** [[http://www.falstad.com/mathphysics.html][Math and Physics Simulations]] :physics:java:script:simulations:
** [[https://phet.colorado.edu/][PhET: Interactive (Physics) Simulations]] :physics:simulations:
* Programming Languages
** APL
*** [[http://wordsandbuttons.online/apl_deserves_its_renaissance_too.html][APL deserves its renaissance too]]
** Assembly
*** [[http://bob.cs.sonoma.edu/IntroCompOrg-RPi/intro-co-rpi.html][Introduction to Computer Organization: ARM Assembly Language Using the Raspberry Pi]] :assembly:arm:raspberry:pi:
*** [[https://github.com/ICTeam28/PiFox][ICTeam28/PiFox]] :assembly:arm:raspberry:pi:2014:
*** [[http://benhoyt.com/writings/pyast64/][Compiling Python syntax to x86-64 assembly for fun and (zero) profit]] :assembly:x86:python:static:2017:
*** [[https://csl.name/post/python-compiler/][JIT compiling a subset of Python to x86-64]] :assembly:x86:python:jit:2017:
*** [[https://github.com/nemasu/asmttpd][nemasu/asmttpd]] :assmebly:x86:networking:http:2013:2017:
** C
*** [[http://www.maizure.org/projects/printf/index.html][Tearing apart printf()]] :c:language:low:level:2018:
*** [[http://nullprogram.com/blog/2018/06/10/][Minimalist C Libraries]] :c:language:libraries:2018:
*** [[http://www.iso-9899.info/wiki/Alignment][iso-9899 wiki: Alignment]] :wiki:c:language:2017:
*** [[https://wozniak.ca/blog/2018/06/25/Massacring-C-Pointers/index.html][Massacring C Pointers]] :c:language::2018:
**** [[https://wozniak.ca/blog/2018/06/25/Massacring-C-Pointers/code.html][Code Listing from Massacring C Pointers]] :c:language:2018:
*** [[https://stefansf.de/post/pointers-are-more-abstract-than-you-might-expect/][Pointers are more abstract than you might expect in C]] :c:language:2018:
*** [[https://stackoverflow.com/questions/514118/how-does-duffs-device-work][How does Duff's device work?]] :c:optimization:2009:
*** [[https://nullprogram.com/blog/2018/07/20/][The Value of Undefined Behavior]]                                  :c:2018:
**** [[https://news.ycombinator.com/item?id=17581319][Hacker News Discussion #17581319]] :discussion:c:2018:
*** [[http://floooh.github.io/2018/06/02/one-year-of-c.html][One year of C]] :c:webassembly:2018:
**** [[https://news.ycombinator.com/item?id=17216039][Hacker News Discussion #17216039]] :discussion:article:c:webassembly:
*** Libraries
**** [[http://www.musl-libc.org/][musl-lib]] :c:language:
**** [[https://github.com/mity/acutest][mitv/acutest]] :c:language:test:framework:2017:
**** [[http://www.glfw.org/index.html][GLFW]] :c:language:opengl:framework:2017:
**** [[https://github.com/hnes/libaco][hnes/libaco]] :c:language:coroutines:2018:
** C++
*** [[https://yosefk.com/c++fqa/][C++ FQA]]                                              :language:cpp98:fqa:
    A bit dated now, especially with regards to consistency between implementations and support for modern features.
    However, many of the general concerns still ring true today.
*** [[http://cpptruths.blogspot.com/][C++ Truths]] :blog:language:cpp:2017:
    A blog exploring C++ features and best practices with articles posted between =2005= and =2017=.
**** [[http://cpptruths.blogspot.com/2005/06/i-love-c-programming-language-for-its.html][I love C++ Programming]] :blog:language:cpp:2005:
**** [[http://cpptruths.blogspot.com/2014/03/fun-with-lambdas-c14-style-part-1.html][Fun with Lambdas: C++14 Style (part 1)]] :blog:language:cpp:2014:
**** [[http://cpptruths.blogspot.com/2014/05/fun-with-lambdas-c14-style-part-2.html][Fun with Lambdas: C++14 Style (part 2)]] :blog:language:cpp:2014:
**** [[http://cpptruths.blogspot.com/2014/08/fun-with-lambdas-c14-style-part-3.html][Fun with Lambdas: C++14 Style (part 3)]] :blog:language:cpp:2014:
**** [[http://cpptruths.blogspot.com/2015/06/fun-with-lambdas-c14-style-part-4.html][Fun with Lambdas: C++14 Style (part 4)]] :blog:language:cpp:2015:
*** [[https://github.com/lefticus/cppbestpractices][lefticus/cppbestpractices]]         :repository:language:cpp:best:practices:2015:2018:
**** [[https://lefticus.gitbooks.io/cpp-best-practices/][GitBook: C++ Best Practices]]      :book:language:cpp:best:practices:2018:

*** [[https://github.com/rigtorp/awesome-modern-cpp][rigtorp/awesome-modern-cpp]] :repository:language:cpp:awesome:list:2016:
*** [[https://docs.microsoft.com/en-us/cpp/cpp/welcome-back-to-cpp-modern-cpp][Microsoft: Welcome back to C++ - Modern C++]] :language:cpp11:cpp14:2016:
*** [[https://google.github.io/styleguide/cppguide.html][Google C++ Style Guide]] :language:cpp:style:guide:
*** [[https://github.com/isocpp/CppCoreGuidelines][isocpp/CppCoreGuidelines]] :language:cpp11:cpp14:cpp17:guidelines:2018:
    C++ core guidelines maintained by Dr. Bjarne Stroustrup.
**** [[http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines][ISO CPP: C++ Core Guidelines]] :language:cpp11:cpp14:cpp17:guidelines:2018:
*** [[https://github.com/Microsoft/GSL][Microsoft/GSL]] :language:cpp11:cpp14:cpp17:2016:2018:
    The /Microsoft/ reference *Guideline SUpport Library*.
*** [[https://isocpp.org/faq][ISO CPP: C++ FAQ Super FAQ]]                      :language:cpp11:cpp14:faq:
*** [[https://news.ycombinator.com/item?id=16535886][HackerNews Discussion #16535886: Ask HN: Best way to learn modern C++?]] :language:cpp:learning:modern:hacker:news:2018:
*** [[http://clang.llvm.org/docs/ClangFormat.html][clang-format: Automated formatting for C and C++]] :language:cpp:clang:formatter:
#+CAPTION: Basic Emacs integration binding C-M-TAB to clang-format-region
#+BEGIN_SRC elisp
(load "<path-to-clang>/tools/clang-format/clang-format.el")
(global-set-key [C-M-tab] 'clang-format-region)
#+END_SRC
*** [[https://www.conan.io/][conan - The C / C++ package manager for developers]] :language:cpp:library:package:manager:
*** [[http://blog.reverberate.org/2013/08/parsing-c-is-literally-undecidable.html][Parsing C++ is literally undecidable]] :language:cpp:compilers:decideability:2013:
*** [[https://www.bfilipek.com/2018/06/parstl-tests.html][Examples of Parallel Algorithms From C++17]] :language:cpp:cpp17:algorithms:parallel:2018:
*** [[https://github.com/mattbierner/STT-C-Compile-Time-Snake][mattbierner/STT-C-Compile-Time-Snake]] :repository:language:cpp:templates:2014:2016:
*** [[https://ds9a.nl/articles/posts/c++-1/][Modern C++ for C Programmers: part 1]] :article:cpp:cpp14:cpp17::2018:
**** [[https://news.ycombinator.com/item?id=17309654][Hackernews Discussion #17309654]] :discussion:article:cpp:cpp14:cpp17::2018:
**** [[https://ds9a.nl/articles/posts/cpp-2/][Modern C++ for C programmers: part 2]] :article:cpp:cpp14:cpp17::2018:
**** [[https://ds9a.nl/articles/posts/cpp-3/][Modern C++ for C Programmers: Part 3]] :article:cpp:cpp14:cpp17::2018:
**** [[https://ds9a.nl/articles/posts/cpp-4/][Modern C++ for C Programmers: Part 4]] :article:cpp:cpp14:cpp17::2018:
***** [[https://news.ycombinator.com/item?id=17608811][Hacker News Discussion #17608811]] :discussion:article:cpp:cpp14:cpp17::2018:
*** Libraries
**** [[https://github.com/nothings/single_file_libs][Github: nothings/single_file_libs]] :repository:list:cpp:library:
**** Testing
***** [[https://github.com/catchorg/Catch2][catchorg/Catch2]]                      :language:cpp:test:framework:2018:
    Modern test framework in a header (or few, with extensions).
**** Command Line Argument Parsing
***** [[https://github.com/kmurray/libargparse][kmurray/libargparse]]        :language:cpp:argument:parsing:library:2017:
    A C++11 command-line parsing single-header library inspired by Python's =argparse=.
***** [[https://github.com/catchorg/Clara][catchorg/Clara]]             :language:cpp:argument:parsing:library:2018:
     A simple to use, composable, command line parser for C++ 11 and beyond in a single-header library.
#+BEGIN_SRC cpp
int width = 0;
std::string name;
bool doIt = false;
std::string command;
auto cli
    = Opt( width, "width" )
        ["-w"]["--width"]
        ("How wide should it be?")
    | Opt( name, "name" )
        ["-n"]["--name"]
        ("By what name should I be known")
    | Opt( doIt )
        ["-d"]["--doit"]
        ("Do the thing" )
    | Arg( command, "command" )
        ("which command to run");
#+END_SRC
***** [[https://github.com/muellan/clipp][meullan/clipp]]              :language:cpp:argument:parsing:library:2018:
     Easy to use, powerful and expressive command line argument handling for C++11/14/17 contained in a single header file.
#+BEGIN_SRC cpp
#include <iostream>
#include "clipp.h"
using namespace clipp; using std::cout; using std::string;

int main(int argc, char* argv[]) {
    bool rec = false, utf16 = false;
    string infile = "", fmt = "csv";

    auto cli = (
        value("input file", infile),
        option("-r", "--recursive").set(rec).doc("convert files recursively"),
        option("-o") & value("output format", fmt),
        option("-utf16").set(utf16).doc("use UTF-16 encoding")
    );

    if(!parse(argc, argv, cli)) cout << make_man_page(cli, argv[0]);
    // ...
}
#+END_SRC
**** Terminal Colors
***** [[https://github.com/agauniyal/rang][agaunival/rang]]              :language:cpp:terminal:colors:library:2018:
     A Minimal, Header only Modern c++ library for colors in your terminal.
**** Formatting
***** [[https://github.com/fmtlib/fmt][fmtlib/fmt]]                        :language:cpp:string:formatting:2018:
     Pythonic and C-style stand-alone and efficient (compile and runtime).
     Implements [[http://fmtlib.net/Text%20Formatting.html][P0645 Text Formatting]] C++ standards proposal.
**** Functional
***** [[https://github.com/beark/ftl][beark/ftl]]                                :language:cpp:functional:2015:
*** Videos
**** [[https://www.youtube.com/watch?v=hEx5DNLWGgA][CppCon 2015: Herb Sutter "Writing Good C++14... By Default"]] :video:talk:language:cpp:sutter:2015:
**** [[https://www.youtube.com/watch?v=fX2W3nNjJIo][CppCon 2017: Bjarne Stroustrup “Learning and Teaching Modern C++”]] :video:talk:language:cpp:stroustrup:2017:
** C#
*** [[https://blog.marcgravell.com/2018/07/pipe-dreams-part-1.html][Pipelines - a guided tour of the new IO API in .NET, part 1]] :csharp:2018:
** Go
*** [[https://github.com/chaseadamsio/goorgeous][chaseadamsio/goorgeous]] :github:golang:emacs:orgmode:2017:2018:
** Erlang
*** [[https://happi.github.io/theBeamBook/][The Erlang Runtime System (a.k.a. The Beam Book]] :book:erlang:runtime:
** Javascript
*** [[https://github.com/mozilla/narcissus/][mozilla/narcissus]] :javascript:meta:circular:interpreter:2012:
*** [[https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript][Professor Frisby introduces composable functional Javascript]] :video:course:javascript:functional:programming:
*** [[https://github.com/isomorphic-git/isomorphic-git][isomorphic-git/isomorphic-git]] :javascript:git:implementation:2018:
** Lisp
*** [[http://norvig.com/lispy.html][(How to Write a (Lisp) Interpreter (in Python))]] :norvig:implementing:lisp:in:python:2010:
*** [[https://carld.github.io/2017/06/20/lisp-in-less-than-200-lines-of-c.html][Lisp In Less Than 200 Lines Of C]] 		:implementing:lisp:in:c:2017:
*** [[http://faust.grame.fr/about/][Faust Programming Language]] 	      :dsp:programming:compiling:to:cpp:2016:
*** [[https://news.ycombinator.com/item?id=15832989][HackerNews discussion about Faust 2017-12-02]]
*** [[https://news.ycombinator.com/item?id=13012880][HackerNews discussion about Faust 2016-11]]
*** [[https://www.quora.com/What-did-Alan-Kay-mean-by-Lisp-is-the-greatest-single-programming-language-ever-designed/answer/Alan-Kay-11][What did Alan Kay mean by, "Lisp is the greatest single programming language ever designed"? Answer by Alan Kay]] :alan:kay:programming:language:design:lisp:2017:

   [[https://www.quora.com/profile/Alan-Kay-11][Alan Kay]], I am the Alan Kay in question. Updated =2017 October 29=.

   #+BEGIN_QUOTE
First, let me clear up a few misconceptions from the previous answers.
One of them said “Try writing an operating system with Lisp”, as though this would be somehow harder.
In fact, one of the nicest operating systems ever done was on “The Lisp Machines” (in Zeta-Lisp), the hardware and software following the lead of “The Parc Machines” and Smalltalk — and we in turn had been very influenced by the Lisp model of programming and implementation.
(These operating systems in both Smalltalk and Lisp were both better (claim) and easier to write (simpler to demonstrate) than the standard ones of today.)

Another interesting answer assumed that “the test of time” is somehow a cosmic optimization.
But as every biologist knows, Darwinian processes “find fits” to an environment, and if the environment is lacking, then the fits will be lacking.
Similarly, if most computer people lack understanding and knowledge, then what they will select will also be lacking.
There is abundant evidence today that this is just what has happened.

But neither of these has anything to do with my praise of Lisp (and I did explain what I meant in more detail in “The Early History of Smalltalk”).

To start with an analogy, let’s notice that a person who has learned calculus fluently can in many areas out-think the greatest geniuses in history.
Scientists after Newton were qualitatively more able than before, etc.
My slogan for this is “Point of view is worth 80 IQ points” (you can use “context” or “perspective” etc.).
A poor one might subtract 80 IQ points! (See above).
A new more powerful one makes some thinking possible that was too difficult before.

One of our many problems with thinking is “cognitive load”: the number of things we can pay attention to at once.
The cliche is 7±2, but for many things it is even less.
We make progress by making those few things be more powerful.

This is one of the reasons mathematicians like compact notation.
The downside is the extra layers of abstraction and new cryptic things to learn — this is the practice part of violin playing — but once you can do this, what you can think about at once has been vastly magnified.
There were 20 Maxwell’s Equations in their original form (in terms of partial differentials and cartesian coordinates).
Today the four equations we can think about all at once are primarily due to their reformulation by Heaviside to emphasize what is really important about them (and what is likely to be problematic — e.g.
the electric and magnetic fields should probably be symmetric with respect to movement, etc).

Modern science is about experiencing phenomena and devising models whose relationships with the phenomena can be “negotiated”.
The “negotiation” is necessary because what’s inside our heads, and our representations systems etc have no necessary connection to “what’s out there?”.

Taking this point of view, we can see there can be a “bridge science” and “bridge scientists” because engineers build bridges and these furnish phenomena for scientists to make models of.

Similarly, there can be a “computer science” and “computer scientists” because engineers build hardware and software and these furnish phenomena for scientists to make models of.
(In fact, this was a large part of what was meant by “computer science” in the early 60s — and it was an aspiration — still is — not an accomplished fact).

The story behind Lisp is fun (you can read John McCarthy’s account in the first History of Programming Languages).
One of the motivations was that he wanted something like “Mathematical Physics” — he called it a “Mathematical Theory of Computation”.
Another was that he needed a very general kind of language to make a user interface AI — called “The Advice Taker” — that he had thought up in the late 50s.

He could program — most programs were then in machine code, Fortran existed, and there was a language that had linked lists.

John made something that could do what any programming language could do (relatively easy), but did it in such a way so that it could express the essence of what it was about (this was the math part or the meta part or the modern Maxwell’s Equations part, however you might like to think of it).
He partly did this — he says — to show that this way to do things was “neater than a Turing Machine”.

Another observation about this is that the “slope” from the simplest machine structures to the highest level language was the steepest ever — meaning that the journey from recognizable hardware to cosmic expression is a rocket jump!

As is often the case — especially in engineering — a great scientific model is often superior to what exists, and can lead to much better artifacts.
This was certainly true here.
Steve Russell (later famous for being the main inventor and programmer of “SpaceWar”) looked at what John had done, and said: “That’s a program.
If I coded it up we’d have a running version”.
As John remarked: “He did, and we did”!

The result was “unlimited programming in an eyeful” (the bottom half of page 13 in the Lisp 1.5 manual).
The key was not so much “Lisp” but the kinds of thinking that this kind of representational approach allowed and opened up regarding all kinds of programming language schemes.

A fun thing about it this is that once you’ve grokked it, you can think right away of better programming languages than Lisp, and you can think right away of better ways to write the meta descriptions than John did.
This is the “POV = 80 IQ points” part.

But this is like saying that once you’ve seen Newton, it becomes possible to do electrodynamics and relativity.
The biggest feat in science was Newton’s!

This is why “Lisp is the greatest!”
   #+END_QUOTE

*** [[https://bsima.me/clog/robust-clojure-nil.html][Robust Clojure: The best way to handle nil]] :programming:language:lisp:clojure:nil:null:handling:2018:
*** [[http://www.ccs.neu.edu/home/matthias/HtDP2e/][How to Design Programs 2]]                               :book:programming:language:lisp:scheme:2014:
*** [[https://ds26gte.github.io/tyscheme/][Teach Yourself Scheme in FIXNUM days]] :book:programming:language:lisp:scheme:
*** [[http://stevelosh.com/blog/2018/07/fun-with-macros-if-let/][Fun with Macros: if-let and when-let]] :blog:language:lisp:macros:2018:
** Python
*** [[http://automatetheboringstuff.com/chapter0/][Automate the Boring Stuff with Python]] :book:python:programming:automation:
*** [[http://exploreflask.com][Explore Flask]] :python:programming:web:site:api:
*** [[https://vorpus.org/blog/some-thoughts-on-asynchronous-api-design-in-a-post-asyncawait-world/][Some thoughts on asynchrous API design in a post async/await world]] :python:asynchronous:2016:
*** [[https://blog.petrzemek.net/2018/04/22/on-incomplete-http-reads-and-the-requests-library-in-python/][On Incomplete HTTP Reads and the Requests Library In Python]] :python:requests:2018:
*** [[http://willcrichton.net/notes/programming-in-the-debugger/][Programming in the Debugger]] :python:jupyter:2018:
*** Libraries
**** [[http://npyscreen.readthedocs.io/index.html][npyscreen Documentation]] :python:library:terminal:ui:2014:
**** [[http://python-prompt-toolkit.readthedocs.io/en/master/][prompt-toolkit Documentation]] :python:library:terminal:ui:2014:2018:
**** [[http://toolz.readthedocs.io/en/latest/][toolz Documentation]] :python:library:functional:2014:2018:
***** [[http://toolz.readthedocs.io/en/latest/streaming-analytics.html][toolz Documentation: Streaming Analytics]] :python:library:functional:
* Project Management
** [[https://martinfowler.com/articles/itsNotJustStandingUp.html][It's Not Just Standing Up: Patterns for Daily Standup Meetings]] :meetings:article:2016:
** [[https://www.blossom.co/blog/3-tips-for-quick-effective-stand-up-meetings][3 Tips for Effective Stand-Up Meetings]] :meetings:article:2016:
   1. Brew some tea together
   2. Get a Kanban board
   3. Adapt the format
** [[https://blog.gotomeeting.com/7-rules-effective-stand-meetings/][7 Rules for Effective Stand-Up Meetings]]            :meetings:article:2018:
   1. Only meet when necessary
   2. Keep it short and sweet
   3. Establish a goal
   4. Maintain structure
   5. Make remote employees feel like they're there
   6. Give everyone a chance to talk
   7. Don't skip follow-up
** [[https://sprint.ly/blog/scrum-meeting-best-practices/][5 Scrum Meeting Best Practices: Master the Daily Stand-Up]] :meetings:article:2016:
   1. Remain standing
   2. Your 3-question agenda
      1. What did you accomplish since the last meeting?
      2. What are you working on until the next meeting?
      3. What is getting in your way or keeping you from your job?
   3. Have your project management tool visible
   4. It's a collaborative effort
   5. Plan the meeting around your team
*** Avoidance alert: 4 bad habits that derail scrum meetings
    1. Waiting around for your team
    2. Introducing new ideas
    3. Leetting people ramble
    4. Abandoning team communication in favor of the standup
** [[https://www.laserfiche.com/ecmblog/10-ways-to-make-stand-up-meetings-better-office-hack/][Office Hack: 10 ways to make Stand-Up meetings better]] :meetings:article:
   1. Rally the troops
   2. Signal the end
   3. Instill intrigue
   4. Actually Stand Up
   5. Keep it short
   6. Keep it small
   7. Stick to the Trhee Questions
      1. What did I accomplish yesterday?
      2. What will I do today?
      3. What obstacles are impeding my progress?
   8. Stay focused, not officious
   9. Evaluate stand-ups
   10. Maintain consistency
** [[https://medium.com/@jsonpify/you-dont-need-standup-9a74782517c1][You don’t need standup]] :meetings:article:2018:
*** [[https://news.ycombinator.com/item?id=17671464][Hacker News Discussion #17671464]] :discussion:meetings:article:2018:
* Reverse Engineering
** [[https://www.youtube.com/user/OpenSecurityTraining][Open Security Training YouTube Channel]]                            :videos:binary:reverse:engineering:
** [[https://github.com/FireyFly/pixd][Colourful visualization tool for binary files]] :binary:data:visualization:
** [[https://binary.ninja/][Binary Ninja]] :reverse:engineering:platform:
** [[https://www.trailofbits.com/research-and-development/binja/][Trail of Bits: Binary Ninja]] :reverse:engineering:platform:
** [[https://github.com/radareorg/cutter][radareorg/cutter]] :github:reverse:engineering:platform:
** [[https://jamchamb.github.io/2018/06/09/animal-crossing-developer-mode.html][Reverse engineering Animal Crossing's developer mode]] :reverse:engineering:2018:
* Revision Control
** [[https://git-scm.com/book/en/v2][Git Book (v2)]] 						   :git:book:
** [[http://gitready.com/][git ready]] 						    :git:tips:tricks:

** [[https://github.com/GitAlias/gitalias/blob/master/gitalias.txt][GitAlias/gitalias/gitalias.txt]] 		   :git:alias:aliases:tricks:

** [[http://manishearth.github.io/blog/2017/03/05/understanding-git-filter-branch/][Understanding git filter-branch]] 		 :git:advanced:branch:tricks:

** [[http://nvie.com/posts/a-successful-git-branching-model/][A successful Git branching model]] 		  :git:workflow:branch:model:

    Original post from 2010.  Also check out [[https://github.com/nvie/gitflow][Van Driessen's git flow plugin]].

** [[https://www.atlassian.com/git/tutorials/comparing-workflows][Atlassian's comparing workflows and tutorials]]  :git:workflow:branch:model:

** [[https://bitbucket.org/yujiewu/hgflow/wiki/Home.wiki#!generalized-driessens-branching-model][HGFlow - Generalized Driessen's Branching Model]] :hg:workflow:branch:model:

** [[https://guides.github.com/introduction/flow/][Understanding the Github Flow]] 	   :git:github:workflow:branch:model:

** [[https://github.com/jonas/tig][tig]] 						       :git:porcelain:curses:

** [[https://magit.vc/][Magit]] 						:git:porcelain:emacs:
*** [[https://magit.vc/manual/magit.html#Getting-Started][Magit User Manual - Getting Started]] :git:magit:user:manual:
*** [[https://emacsair.me/2017/09/01/magit-walk-through/#start][magit walk through]] :git:magit:walkthrough:2017:
** [[http://gittup.org/gittup/][gittup]] :git:linux:distribution:
** [[http://ohshitgit.com/][ohshitgit]] :git:oh:shit:pitfalls:remedies:
** [[https://gist.github.com/scottnonnenberg/fefa3f65fdb3715d25882f3023b31c29][scottnonnenberg/.gitconfig with GPG signing and other goodies]] :git:config:2018:
#+CAPTION: calcyman's elemental knightship
#+BEGIN_SRC ini
[alias]
  prune = fetch --prune
  # Because I constantly forget how to do this
  # https://git-scm.com/docs/git-fetch#git-fetch--p

  undo = reset --soft HEAD^
  # Not quite as common as an amend, but still common
  # https://git-scm.com/docs/git-reset#git-reset-emgitresetemltmodegtltcommitgt

  stash-all = stash save --include-untracked
  # We wanna grab those pesky un-added files!
  # https://git-scm.com/docs/git-stash

  glog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  # No need for a GUI - a nice, colorful, graphical representation
  # https://git-scm.com/docs/git-log
  # via https://medium.com/@payload.dd/thanks-for-the-git-st-i-will-use-this-4da5839a21a4

[merge]
  ff = only
  # I pretty much never mean to do a real merge, since I use a rebase workflow.
  # Note: this global option applies to all merges, including those done during a git pull
  # https://git-scm.com/docs/git-config#git-config-mergeff

  conflictstyle = diff3
  # Standard diff is two sets of final changes. This introduces the original text before each side's changes.
  # https://git-scm.com/docs/git-config#git-config-mergeconflictStyle

[commit]
  gpgSign = true
  # "other people can trust that the changes you've made really were made by you"
  # https://help.github.com/articles/about-gpg/
  # https://git-scm.com/docs/git-config#git-config-commitgpgSign

[push]
  default = simple
  # "push the current branch back to the branch whose changes are usually integrated into the current branch"
  # "refuse to push if the upstream branch’s name is different from the local one"
  # https://git-scm.com/docs/git-config#git-config-pushdefault

  followTags = true
  # Because I get sick of telling git to do it manually
  # https://git-scm.com/docs/git-config#git-config-pushfollowTags

[status]
  showUntrackedFiles = all
  # Sometimes a newly-added folder, since it's only one line in git status, can slip under the radar.
  # https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles

[transfer]
  fsckobjects = true
  # To combat repository corruption!
  # Note: this global option applies during receive and transmit
  # https://git-scm.com/docs/git-config#git-config-transferfsckObjects
  # via https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0


# A nice little github-like colorful, split diff right in the console.
# via http://owen.cymru/github-style-diff-in-terminal-with-icdiff/
[diff]
  tool = icdiff
[difftool]
  prompt = false
[difftool "icdiff"]
  cmd = /usr/local/bin/icdiff --line-numbers $LOCAL $REMOTE
#+END_SRC
** [[https://zwischenzugs.com/2018/03/14/five-key-git-concepts-explained-the-hard-way/][Five Key Git Concepts Explained the Hard Way]] :2018:
   Author of the book [[https://leanpub.com/learngitthehardway][Learn Git The Hard Way]] offers some git exercises.
*** References
    - =HEAD= :: =HEAD= is a special reference that always points to where the git /repository/ is.
    - /tag/ :: A /tag/ is a reference that points to a specifi /commit/.
    - /branch/ :: A /branch/ is like a /tag/, but will move when the =HEAD= moves.
    - /remote reference/ :: A /remote reference/ is a reference to code that’s from another /repository/.
    Type out these commands and explain what’s going on. Take your time:
#+CAPTION: Learning about git references, the hard way
#+BEGIN_SRC shell
mkdir lgthw_origin
cd lgthw_origin
git init
echo 1 > afile
git add afile
git commit -m firstcommit
git log --oneline --decorate --all --graph
git branch otherbranch
git tag firstcommittag
git log --oneline --decorate --all --graph
echo 2 >> afile
git commit -am secondcommit
git checkout otherbranch
git log --oneline --decorate --all --graph
echo 3 >> afile
git commit -am thirdcommit
git log --oneline --decorate --all --graph
#+END_SRC
*** Detached Head
#+CAPTION: Learning about git detached heads, the hard way
#+BEGIN_SRC shell
git checkout firstcommit
# You are in 'detached HEAD' state.
git log --oneline --decorate --all --graph
git checkout -b firstcommitbranch
git log --oneline --decorate --all --graph
#+END_SRC
*** Remote Reference
#+CAPTION: Learning about git remote references, the hard way
#+BEGIN_SRC shell
cd ..
git clone lgthw_origin lgthw_cloned
cd lgthw_cloned
git remote -v
git log --oneline --decorate --all --graph
git branch -a
git checkout master
# Branch master set up to track remote branch master from origin. Switched to a new branch 'master'
cd ../lgthw_origin
git checkout master
echo origin_change >> afile
git commit -am 'Change on the origin'
cd ../lgthw_cloned
git fetch origin
git log --oneline --decorate --all --graph
#+END_SRC
*** Fast Forward
#+CAPTION: Learning about git fast forward, the hard way
#+BEGIN_SRC shell
git merge origin/master
git log --oneline --decorate --all --graph
#+END_SRC
*** Rebase
#+CAPTION: Learning about git rebase, the hard way
#+BEGIN_SRC shell
cd ../lgthw_origin
git status
echo origin_change_rebase >> afile
git commit -am 'origin change rebase'
git log --oneline --decorate --all --graph
cd ../lgthw_cloned
echo cloned_change_rebase >> anewfile
git add anewfile
git commit -m 'cloned change rebase in anewfile'
git log --oneline --decorate --all --graph
git fetch origin
git log --oneline --decorate --all --graph
git rebase origin/master
git log --oneline --decorate --all --graph
#+END_SRC
** [[http://www.catb.org/esr/reposurgeon/][esr/reposurgeon]] :revision:control:repository:surgery:2018:
** [[https://www.destroyallsoftware.com/blog/2017/the-biggest-and-weirdest-commits-in-linux-kernel-git-history][The Biggest and Weirdest Commits in Linux Kernel Git History]] :revision:control:git:linux:2017:
** [[https://zwischenzugs.com/2018/03/26/git-log-the-good-parts/][Git Log: The Good Parts]] :revision:control:git:log:2018:
*** [[https://news.ycombinator.com/item?id=16677308][Hacker News Discussion #16677308]] :discussion:revision:control:git:log:2018:
** [[https://drewdevault.com/2018/07/02/Email-driven-git.html][The advantages of an email-driven git workflow]] :revision:control:git:2018:
** [[https://twobithistory.org/2018/07/07/cvs.html][Version Control Before Git with CVS]] :revision:control:history:2018:
** [[https://www.codementor.io/citizen428/git-tutorial-10-common-git-problems-and-how-to-fix-them-aajv0katd][Git Tutorial: 10 Common Git Problems and How to Fix Them]] :revisioncontrol:git:2018:
* Shells and Terminals
** [[https://zanshin.net/2013/02/02/zsh-configuration-from-the-ground-up/][Zsh Configuration From the Ground Up]] :zsh:configuration:tutorial:2013:
** [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][Eschewing Zshell for Emacs Shell]] :zsh:emacs:eshell:

** [[https://termux.com][Termux]] :android:terminal:emulator:
** [[https://github.com/anordal/shellharden/blob/master/how_to_do_things_safely_in_bash.md][anordal/shellharden: How to do things safely in bash]] :bash:shell:safety:2018:
** [[http://blog.deadvax.net/2018/05/29/shell-magic-set-operations-with-uniq/][Shell Magic: Set Operations with uniq]] :shell:scripting:2018:
* Software Engineering
** [[http://www.drdobbs.com/architecture-and-design/software-engineering-computer-science/217701907][Software Engineering ≠ Computer Science]] :software:engineering:architecture:design:2009:
** [[http://python.apichecklist.com/][Python API Checklist]] :python:api:programming:checklist:2017:
** [[https://blog.ionelmc.ro/2014/06/25/python-packaging-pitfalls/][Python Packaging Pitfalls]] :python:packaging:2014:
** [[https://ep2015.europython.eu/conference/talks/less-known-packaging-features-and-tricks][Less known (python) packaging features and tricks]] :python:packaging:talk:slides:video:2015:
** [[https://github.com/arogozhnikov/python3_with_pleasure][Migrating to Python 3 with pleasure]] :python:3:migration:features:
** [[https://zealdocs.org/][Zeal is an offline documentation browser for software developers.]] :software:engineering:programming:languages:offline:documentation:reference:
** [[http://www.humus.name/index.php?page=News&ID=383][Rules of optimization]] :software:engineering:optimization:process:2018:
** [[https://en.wikipedia.org/wiki/Mutation_testing][Wikipedia: Mutation Testing]] :wiki:software:engineering:testing:
*** [[https://www.guru99.com/mutation-testing.html][Mutation Testing: Complete Guide]] :article:software:engineering:testing:
#+CAPTION: Explanation of Mutation Testing
#+BEGIN_QUOTE
Mutation Testing is a type of software testing where we mutate (change) certain statements in the source code and check if the test cases are able to find the errors.
It is a type of White Box Testing which is mainly used for Unit Testing.
The changes in mutant program are kept extremely small, so it does not affect the overall objective of the program.

The goal of Mutation Testing is to assess the quality of the test cases which should be robust enough to fail mutant code.
This method is also called as Fault based testing strategy as it involves creating fault in the program

Mutation was originally proposed in 1971 but lost fervor due to high costs involved.
Now, again it has picked steam and is widely used for languages such as Java and XML.
#+END_QUOTE
*** [[https://ai.google/research/pubs/pub46584][State of Mutation Testing at Google]] :paper:software:engineering:testing:2018:
#+CAPTION: Abstract of the paper
#+BEGIN_QUOTE
Mutation testing assesses test suite efficacy by inserting small faults into programs and measuring the ability of the test suite to detect them.
It is widely considered the strongest test criterion in terms of finding the most faults and it subsumes a number of other coverage criteria.
Traditional mutation analysis is computationally prohibitive which hinders its adoption as an industry standard.
In order to alleviate the computational issues, we present a diff-based probabilistic approach to mutation analysis that drastically reduces the number of mutants by omitting lines of code without statement coverage and lines that are determined to be uninteresting - we dub these arid lines.
Furthermore, by reducing the number of mutants and carefully selecting only the most interesting ones we make it easier for humans to understand and evaluate the result of mutation analysis.
We propose a heuristic for judging whether a node is arid or not, conditioned on the programming language.
We focus on a code-review based approach and consider the effects of surfacing mutation results on developer attention.
The described system is used by 6,000 engineers in Google on all code changes they author or review, affecting in total more than 14,000 code authors as part of the mandatory code review process.
The system processes about 30% of all diffs across Google that have statement coverage calculated.
#+END_QUOTE
* Systems Engineering
** [[https://alestic.com/2010/12/ec2-user-data-output/][Logging user-data Script Output on EC2 Instances]] :systems:cloudinit:logging:aws:ec2:

** [[http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html][Linux Load Averages: Solving the Mystery]] :systems:linux:load:average:algorithm:history:

** [[https://lonesysadmin.net/2011/11/08/ssh-escape-sequences-aka-kill-dead-ssh-sessions/amp/][SSH Escape Sequences]] :systems:linux:ssh:escape:sequences:2011:

   - ~. :: terminate connection (and any multiplexed sessions)
   - ~B :: send a BREAK to the remote system
   - ~C :: open a command line
   - ~R :: Request rekey (SSH protocol 2 only)
   - ~^Z:: suspend ssh
   - ~# :: list forwarded connections
   - ~& :: background ssh (when waiting for connections to terminate)
   - ~? :: this message
   - ~~ :: send the escape character by typing it twice

** [[http://nginx.org/][NginX]] 				   :systems:backwards:proxy:web:mail:

   I have been using NginX since version =0.5.x= and have been involved in the community here and there.

   These are some great resources mostly from the [[http://nginx.org/en/docs/][docs]] I commonly share:

   - [[http://nginx.org/en/docs/beginners_guide.html][NginX Beginner's Guide]]
   - [[http://nginx.org/en/docs/http/request_processing.html][How NginX processes a request]]
   - [[http://nginx.org/en/docs/http/configuring_https_servers.html][Configuring HTTPS servers with NginX]]
   - [[https://www.nginx.com/resources/admin-guide/][NginX Administration Guide]]

** [[https://chrisdown.name/2018/01/02/in-defence-of-swap.html][In defence of swap: common misconceptions]] :systems:swap:memory:2018:
** [[http://aws.amazon.com/][Amazon Web Services]]
*** [[https://www.trek10.com/blog/lambda-cost/][AWS Lambda Pricing in Context - A Comparison to EC2]] :systems:aws:2016:
#+CAPTION: Lambda Breakeven Analysis for an m4.large Instance
| Function Execution Time and Memory | Requests per Hour required for Lambda cost to equal EC2 cost | Requests per second |
|------------------------------------+--------------------------------------------------------------+---------------------|
| ~100 ms~ with ~128 MB~ RAM         |                                                       295000 |                81.9 |
| ~200 ms~ with ~512 MB~ RAM         |                                                        64000 |                17.8 |
| ~200 ms~ with ~1024 MB~ RAM        |                                                        34000 |                9.4. |
| ~1000 ms~ with ~1024 MB~ RAM       |                                                         7100 |                 2.0 |
** [[https://github.com/ansible/][Github: Ansible Organization]]
*** [[https://github.com/ansible/ansible][Ansible Configuration Management]] :systems:configuration:management:2012:2018:
** Terraform
*** [[https://opencredo.com/terraform-infrastructure-design-patterns/][Terraform Infrastructure Design Patterns]] :systems:terraform:2015:
*** [[https://medium.com/levops/self-invented-how-to-terraform-rules-4b1eb00709ac][Self-invented “how to Terraform” rules]] :systems:terraform:2017:
* Uncategorized Otherwise
** [[http://www.silota.com/docs/recipes/][Advanced SQL Recipes to jumpstart your Analysis]] :sql:tricks:data:analysis:
** [[http://www.linusakesson.net/programming/tty/][The TTY Demystified]] :unix:history:tty:
** [[http://blog.triplebyte.com/how-to-interview-engineers][How to Interview Engineers]] :hiring:engineers:
** [[https://the-eye.eu/public/rom/][The Eye's ROM Section]] :open:index:emulation:nes:snes:gba:n64:
   The Eye's Rom Section is a project dedicated towards the preservation and archival of video games. All game versions present on the site are already out of production and are unavailable in the primary market.
** [[http://willamette.edu/~fruehr/haskell/evolution.html][Evolution of a Haskell Programmer]] :haskell:humor:
** [[http://farmos.org/][FarmOS]] :open:source:farm:management:
** [[https://www.believermag.com/issues/200609/][Destroy All Monsters]] :role:playing:dungeons:and:dragons:2006:
** [[http://lcamtuf.coredump.cx/prep/][Doomsday planning for less crazy folk]] :planning:for:life:
** [[http://rigsomelight.com/2013/09/09/frameless-geodesic-dome.html][Frameless Geodesic Dome]] :construction:design:geodesic:dome:
** [[https://ski.ihoc.net/][The Most Officialest SkiFree Home Page!]] :software:history:skifree:
** [[http://vvvvalvalval.github.io/posts/what-makes-a-good-repl.html][What makes a good REPL?]] :programming:language:interpreter:design:clojure:
** [[https://github.com/karllhughes/side-project-marketing/blob/master/marketing-checklist.md][Side Project Marketing Checklist]] :open:source:marketing:checklist:2017:
** [[http://www.projectrho.com/public_html/rocket/worldbuilding.php][Worldbuilding]] :world:building:
   Resource on all things world-building with lots of interesting information and pointers to more information about world building.
** [[https://www.youtube.com/channel/UCEXz4oDS5KqIcinH2CjxVfg/videos][Eckkehard The German Butcher]] :youtube:channel:charcutery:butchery:
** [[http://www.idallen.com/topposting.html][Topposting and Bottomposting]] :opinion:holy:war:email:netiquette:
** [[https://techsolidarity.org/resources/basic_security.htm][Basic security precautions for non-profits and journalists in the United States]] :computer:security:guidelines:precautions:2017:
** [[https://mynoise.net/NoiseMachines/neuromodulationTonesGenerator.php][Neural Symphony - Neuromodulated Tinnitus Relief]] :audio:neural:tinnitus:relief:
   Sounds purported to help provide temporary relief to tinnitus sufferers.
** [[http://www.sloperama.com/advice.html][Game Design FAQs]] :game:design:frequently:asked:questions:
** [[https://www.linkedin.com/pulse/invitation-live-consciously-business-introduction-part-fred-kofman][An Invitation to Live Consciously in Business]] :fred:kofman:linkedin:conscious:business:academy:2015:
** [[https://www.sbnation.com/a/17776-football/][17776-football]] :digital:novel:artificial:intelligence:artificial:life:2017:
   A most intriguing story about Football in the year =17776=.
** [[https://cs007.blog/][CS 007 - Personal Finance for Programmers]] :personal:finance:programmers:course:2017:
** [[http://www.people.vcu.edu/~dcranston/490/handouts/math-read.html][How to Read Mathematics]] :mathematics:reading:how:to:
** [[https://www.youtube.com/watch?v=3GJUM6pCpew][standupmaths - Why is TV 29.97 frames per second?]] :mathematics:color:television:video:ntsc:
** [[https://github.com/leandromoreira/ffmpeg-libav-tutorial#learn-ffmpeg-libav-the-hard-way][Learn ffmpeg the hard way]] :video:ffmpeg:tutorial:
** [[http://crasseux.com/books/ctutorial/][The GNU C Programming Tutorial]] :gnu:c:programming:tutorial:
** [[https://viewsourcecode.org/snaptoken/][snaptoken C utility]]
   These tutorials walk you through writing medium-size software projects from scratch, step by step.
   The projects are based on real open-source software projects, and most of the tutorials stay true to the original source code.
   Every line of code is explained in detail, allowing you to thoroughly understand the project’s entire codebase.

   - [[https://viewsourcecode.org/snaptoken/kilo/][kilo]] :: Guide for building text editor in C based on antirez's 1000 line editor
** [[https://www.smbc-comics.com/comic/the-talk-3][Sunday Morning Breakfast Comics: The Talk 3]]  :web:comic:quantum:mechanics:
** [[http://wordsandbuttons.online/programmers_guide_to_polynomials_and_splines.html][Programmer's Guide to Polynomials and Splines]] :mathematics:guide:splines:
** [[https://www.math.uh.edu/~dblecher/pf2.html][How to Study Mathematics]] :mathematics:study:tool:
** [[http://www.pathsensitive.com/2018/01/the-benjamin-franklin-method-of-reading.html][The Benjamin Franklin Method of Reading Programming Books]] :programming:study:method:2018:
** [[https://www.b-list.org/weblog/2018/feb/11/usernames/][Let’s talk about usernames]] :programming:foibles:usernames:2018:
** [[https://qntm.org/abolish][So you want to Abolish Time Zones]] :time:zones:2015:
   A thought experiment about why abolishing time zones is a generally bad idea.

   - You need to know what solar time (daylight) a remote area is for /reasons/
   - Calendaring becomes more complicated with many places have split-day schedules
   - UTC already exists for synchronizing times regardless of time zone
   - The past will still have timezones and each region will switch at different times so you'll still need =zoneinfo= databases
** [[http://spacecraft.ssl.umd.edu/akins_laws.html][Akin's Laws of Spacecraft Design]] :engineering:spacecraft:design:axioms:
** [[https://hackernoon.com/12-manager-readmes-from-silicon-valleys-top-tech-companies-26588a660afe][12 Manager READMEs from Silicon Valley's Top Tech Companies]] :management:2018:
** [[https://tp69.wordpress.com/2018/04/17/completely-silent-computer/][Completely Silent Computer]] :computer:hardware:2018:
*** [[https://news.ycombinator.com/item?id=17075489][Hacker News Discussion #17075489]] :2018:
#+CAPTION: baseethrowaway comments on their setup
#+BEGIN_QUOTE
One can make a passive build much more powerful.

NSG S0, once out, will most likely be the go-to case for such setups.
Until then, an HDPLEX H5 is cool.

My desk has a H5 on it, housing an i7 8700 (non-K) and a GTX 1060.
The TIM under the heatspreader is replaced with Thermal Grizzly Conductonaut and Thermal Grizzly Kryonaut is used as every other TIM that the case setup needs.
The CPU is on stock clocks with a voltage offset of -30 mV.
The GPU has the power target reduced to 90% and clocks increased by 130 MHz, so that it is effectively undervolted as well.
The PSU is a Seasonic Ultra Prime Titanium 650.
Prime95 with AVX throttles really, really fast, under a minute, perhaps, but is a very unrealistic load.
Non-AVX stress tests and FurMark take a while to start throttling (20 minutes?), as the thermal capacity of the aluminum case is quite big.
After hours of gaming, the GPU and CPU float around 80 C while providing full stock performance.
I don't do 3D rendering (other than in-game) or video en/decoding, so have not had long, real-world, full loads to see how temperatures behave with those.

From the discussion I've had and forums I've read, I think that people are afraid of putting more power in passive cases and having their components at "high" temperatures, despite those being rated for them.
#+END_QUOTE

** [[https://getweeklyupdate.com/manager-guide][How to be a Manager]] :management:2018:
** [[https://github.com/kanboard/kanboard][Github: kanboard/kanboard]] :kanban:2015:2018:
   Open source kanban board web application in =PHP= with =MySQL= database.
** [[http://www.texpaste.com/][TexPaste: Pastebin for Mathematicians]] :pastebin:mathematics:
** [[https://www.metapsychosis.com/at-play-personal-odyssey-chess/][At Play: A Personal Odyssey in Chess]] :article:chess:2018:
** [[https://nedbatchelder.com/text/hexwords.html][Hexwords]] :blog:2003:2007:
** [[http://www.columbia.edu/~fdc/postal/][Frank's Compulsive Guide to Postal Addresses]] :addreses:1989:2018:
** [[https://teachyourselfcs.com/][Teach Yourself Computer Science]] :computerscience:2018:
** [[https://www.jofreeman.com/joreen/tyranny.htm][The Tyranny of Structurelessness]] :essay:
** [[http://www.juggling.org/help/siteswap/faq.html][Siteswap FAQ]]                              :answers:juggling:notation:1993:
** [[https://steveblank.com/2009/12/21/the-elves-leave-middle-earth-%E2%80%93-soda%E2%80%99s-are-no-longer-free/][The Elves Leave Middle Earth – Sodas Are No Longer Free]] :startups:2009:
* UNIX and BSD
** [[https://fosdem.org/2017/schedule/event/my_bsd_sucks_less/][My BSD Sucks Less Than Yours]] :talk:unix:openbsd:freebsd:

** [[http://changelog.complete.org/archives/9317-has-linux-lost-its-way-comments-prompt-a-debian-developer-to-revisit-freebsd-after-20-years][“Has Linux lost its way?” comments prompt a Debian developer to revisit FreeBSD after 20 years]] :unix:linux:comparison:2015:
** [[https://manpages.bsd.lv/][Practical UNIX Manuals - mdoc: structure, style, and composition]] :book:unix:man:pages:mdoc:
** [[https://vez.mrsk.me/freebsd-defaults.txt][FreeBSD - a lesson in poor defaults]] :freebsd:defaults:security:2017:
** [[https://pdos.csail.mit.edu/6.828/2017/xv6.html][Xv6, a simple Unix-like teaching operating system]] :2006:2017:
* Video Series
** [[https://www.youtube.com/user/professorleonard57][Professor Leonard]] :video::mathematics:lectures:
** [[https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw][3Blue1Brown]] :video:series:mathematics:
** [[https://www.youtube.com/watch?list=PL2VAYZE_4wRJi_vgpjsH75kMhN4KsuzR_&v=m0TsdytmGhc][Little Bits of Lisp with Baggers]] :video:series:common:lisp:
** [[https://www.youtube.com/watch?v=MCuzvy79WWQ][Rewriting BSD 4.4 Shell Commands (part 1: cat)]]

   According to [[https://learnto.computer/courses][learnto.computer/courses]] not all of the episodes are intended to be free, but at least at one time they were.

* Web Comics
** [[http://darthsanddroids.net/episodes/0001.html][Darths and Droids]] :webcomic:tabletop:rpg:starwars:
