* Borgmarks

Bookmarks in emacs org-mode.

Curated, categorized, and tagged by hand.

* Theory of organization

   Primary categories are used for bucketing related ideas.

   Tagging is used for exposing topics related to a particular link.

** Theory of operation

   Links should be their own headings followed by tags.
   Optional properties with CREATED date.
   Description.

*** [[http://karl-voit.at/2014/08/10/bookmarks-with-orgmode/][Managing web bookmarks with Org-mode]] :emacs:orgmode:bookmarks:
:PROPERTIES:
:CREATED: [2014-08-09 Sat 10:41]
:END:

    Well written post linked to from [[https://www.reddit.com/r/orgmode/comments/3vtxz1/storing_a_collection_of_web_bookmarks_with_org/][this discussion on reddit]] and elsewhere.

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
  '(
    ;; many more capture templates
    ("b" "Bookmark" entry (file+headline "~/share/all/org-mode/notes.org" "Bookmarks") "* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
    ;; many more capture templates
   )
)
#+END_SRC

*** [[http://orgmode.org/orgcard.pdf][Org Card]] 				       :emacs:orgmode:reference:card:

* Algorithms
** Books

*** [[https://github.com/mdipierro/nlib][Annotated Algorithms in Python]] :book:algorithms:python:

** Programming Exercises
*** [[https://projecteuler.net/][Project Euler]] 				  :programming:exercise:math:
*** [[http://codewars.com/][Codewars]] 					       :programming:exercise:
*** [[http://exercism.io/][Exercism]] 				    :programming:exercise:opensource:
** [[https://bost.ocks.org/mike/algorithms/][Visualizing Algorithms]] 		  :bostocks:visualization:algorithms:

   Great overview of various algorithms with visualizations from visualization master Mike Bostocks.

** [[https://yurichev.com/blog/rubik/][Solving pocket Rubik's cube (2 * 2 * 2) using Z3 and SAT solver]] :algorithms:simplified:rubiks:cube:solver:
** [[https://users.cs.duke.edu/~ola/bubble/bubble.html][Bubble Sort: An Archaeological Algorithmic Analysis]] :algorithms:bubble:sort:analysis:
** [[http://www.keithschwarz.com/interesting/][The Archive of Interesting Code]] :algorithms:datastructures:archive:examples:
* Assembly
** [[http://bob.cs.sonoma.edu/IntroCompOrg-RPi/intro-co-rpi.html][Introduction to Computer Organization: ARM Assembly Language Using the Raspberry Pi]] :assembly:arm:raspberry:pi:
** [[http://benhoyt.com/writings/pyast64/][Compiling Python syntax to x86-64 assembly for fun and (zero) profit]] :assembly:x86:python:static:2017:
** [[https://csl.name/post/python-compiler/][JIT compiling a subset of Python to x86-64]] :assembly:x86:python:jit:2017:
* Cryptography

** [[https://begriffs.com/posts/2016-11-05-advanced-intro-gnupg.html][Advanced Introduction to GnuPG]] :cryptography:tutorial:gnupg:

** [[https://github.com/gchq/CyberChef][GCHQ CyberChef]] :cryptography:tools:
   Forked on my own github [[https://github.com/merlincorey/CyberChef][merlincorey/CyberChef]].


** Crypto currencies

*** [[http://www.righto.com/2014/02/ascii-bernanke-wikileaks-photographs.html][Hidden surprises in the Bitcoin blockchain and how they are stored: Nelson Mandela, Wikileaks, photos, and Python software]] :cryptocurrency:blockchain:creative:hacking:2014:
*** [[https://storeofvalue.github.io/posts/cryptocurrency-hacks-so-far-august-24th/][List Of High Profile Cryptocurrency Hacks So Far]] :cryptography:currency:crime:and:theft:2017:
*** [[http://www.jsfour.com/can-you-really-hack-ethereum-smart-contracts/][Can you really hack Ethereum smart contracts?]] :cryptography:currency:ethereum:hate:2017:


*** [[http://www.michaelburge.us/2017/08/31/roll-your-own-bitcoin-exchange.html][Roll your Own Bitcoin Exchange in Haskell]] :cryptography:currency:exchange:haskell:

* Datastructures, Databases, and Filesystems
** [[http://www.eelis.net/C++/analogliterals.xhtml][Multi-Dimensional Analog Literals]] :datastructures:analog:literals:2006:
** [[https://www.interviewcake.com/article/python/data-structures-coding-interview][Datastructures for Coding Interviews]]    :datastructures:python:interviews:
** [[http://www.catb.org/esr/structure-packing/][The Lost Art of C Structure Packing]] :datastructures:c:packing:esr:2014:
** [[https://cstack.github.io/db_tutorial/][Let's Build a Simple Database]] :datastructures:databases:c:language:sql:sqlite:

   Writing a sqlite clone from scratch in C

** [[http://use-the-index-luke.com/no-offset][We need tool support for keyset pagination]] :datastructures:databases:sql:pitfall:pagination:offset:
** [[https://www.percona.com/blog/2017/11/15/zfs-from-a-mysql-perspective/][ZFS from a MySQL perspective]] :datastructures:databases:filesystems:mysql:zfs:2017:
** [[https://blog.demofox.org/2017/11/21/floating-point-precision/][Demystifying Floating Point Precision]] :datastructures:floating:point:numbers:2017:
** [[https://norvig.com/design-patterns/design-patterns.pdf][Design Patterns in Dynamic Programming]] :datastructures:design:patterns:norvig:1996:
** [[http://mishadoff.com/blog/clojure-design-patterns/][Clojure Design Patterns]] :datastructures:design:patterns:2017:
** Alembic
*** [[http://www.chesnok.com/daily/2013/07/02/a-practical-guide-to-using-alembic/][A Practical Guide to using Alembic]] :database:migrations:sqlalchemy:alembic:
*** [[https://www.compose.com/articles/schema-migrations-with-alembic-python-and-postgresql/][Schema Migrations with Alembic, Python, and PostgreSQL]] :databse:migrations:sqlalchemy:alembic:postgres:
* Development Environments and Editors
** [[https://www.emacswiki.org/][Emacs Wiki]] :emacs:xemacs:emacs:lisp:wiki:
** [[http://orgmode.org/manual/][OrgMode Manual]] :emacs:org:mode:manual:
** [[http://sachachua.com/blog/2007/12/how-to-use-emacs-org-as-a-basic-day-planner/][How to use Emacs Org as a Basic Day Planner]] :emacs:org:mode:day:planner:2007:
** [[http://newartisans.com/2007/08/using-org-mode-as-a-day-planner/][Using org-mode as a Day Planner]] :emacs:org:mode:org:day:planner:2007:
** [[http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html][David O'Toole Org tutorial]] :emacs:org:mode:tutorial:todo:agenda:
** [[http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html][Writing Non-Beamer presentations in org-mode]] :emacs:org:mode:presentations:slides:
** [[https://portacle.github.io/][Portacle - Portable Common Lisp IDE]] 	       :emacs:slime:sbcl:common:lisp:
** [[https://github.com/emacs-helm/helm][helm - Emacs incremental completion and selection narrowing framework]] :emacs:package:incremental:completion:search:
** [[https://github.com/bbatsov/projectile][projectile - Project Interaction Library for Emacs]] :emacs:package:project:management:
** [[https://notmuchmail.org/notmuch-emacs/][notmuch for emacs]] :emacs:package:notmuch:integration:
   Searchable and scriptable email in shell and emacs, yes please.
** [[https://geokon-gh.github.io/.emacs.d/][Emacs configuration for C++/CMake/git]] :emacs:configuration:c:language:integrated:development:environment:explained:
** [[https://github.com/rnkn/fountain-mode][fountain-mode - Emacs major mode for screenwriting in Fountain plaintext markup]] :emacs:package:screenwriting:
* Free Books
** [[http://www.ccs.neu.edu/home/matthias/HtDP2e/][How to Design Programs 2]] :book:scheme:2014:
** [[https://softwarefoundations.cis.upenn.edu/][Software Foundations Series (books)]] :books:logic:math:computer:science:proofs:coq:
** [[http://adam.chlipala.net/cpdt/][Certified Programming with Dependent Types]] :book:logic:types:proofs:coq:2017:
* Great Talks

** [[https://www.youtube.com/watch?v=Sg4U4r_AgJU][Brian Kernighan - How to succeed at language design without really trying]] :talk:kernighan:language:design:awk:

    Mentions Alan Perlis' [[http://www.cs.yale.edu/homes/perlis-alan/quotes.html][Epigrams in Programming]]

** [[https://www.youtube.com/watch?v=O3tVctB_VSU][Gerald Sussman - We Don't Really Know how to Compute]] :talk:sussman:computation:

** [[https://www.youtube.com/watch?v=OyfBQmvr2Hc][William Byrd - The Most Beautiful Program Ever Written]] :talk:byrd:interpreters:provers:solvers:minikanren:

   The first half is an overview of Scheme and writing an interpreter in scheme.
   The second half goes into using an advanced interpreter along with logic programming in minikanren to find programs that match test constraints.

** [[https://www.youtube.com/watch?v=Jib2AmRb_rk&app=desktop][SQLite: The Database at the Edge of the Network with Dr. Richard Hipp]] :talk:hipp:database:sqlite:

** Rich Hickey
   Creator of Clojure known for many great talks.
*** [[http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey][Are we there yet?]] 				 :talk:hickey:clojure:design:
*** [[http://www.youtube.com/watch?v=f84n5oFoZBc][Hammock Driven Development]] :talk:hickey:design:
*** [[http://www.infoq.com/presentations/Simple-Made-Easy][Simple Made Easy]] :talk:hickey:complexity:
*** [[http://www.infoq.com/presentations/Value-Values][The Value of Values]] :talk:hickey:
*** [[http://www.youtube.com/watch?v=ROor6_NGIWU][The Language of the System]] :talk:hickey:distrubuted:language:design:
*** [[http://www.infoq.com/presentations/Design-Composition-Performance][Design, Composition, and Performance]] :talk:hickey:

* Frontend Web Design

** [[http://flexboxfroggy.com/][CSS Flexbox Froggy]] :css:flexbox:tutorial:game:

** [[http://cssgridgarden.com/][CSS Grid Garden]] :css:grid:tutorial:game:

* Functional Programming

** [[https://chriskohlhepp.wordpress.com/functional-programming-section/metacircular-adventures-in-functional-abstraction-challenging-clojure-in-common-lisp/][Metacircular Adventures in Functional Abstraction]] :functional:programming:common:lisp:clojure:

** [[https://aphyr.com/posts/301-clojure-from-the-ground-up-welcome][Clojure from the ground up]] :functional:programming:clojure:
** [[http://eli.thegreenplace.net/2017/reducers-transducers-and-coreasync-in-clojure/][Reducers, transducers, and core.async in clojure]] :functional:programming:clojure:


** [[http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html][Functors, Applicatives, And Monads In Pictures]] :functional:programming:functors:monads:visualizations:
** [[https://patrickmn.com/software/the-haskell-pyramid/][The Haskell Pyramid]] :functional:programming:haskell:

* Game Theory

** [[http://www.chesstactics.org/index.php?Type=page&Action=next&From=1,1,1,1][Ward Farnsworth's Predator at the Chessboard]] :gametheory:book:chess:

* Graphics

** [[http://www.extentofthejam.com/pseudo/][Lou's Psuedo 3d Page]] :graphics:3d:rendering:

** [[http://machinethink.net/blog/3d-rendering-without-shaders/][3D Rendering without shaders]] :graphics:3d:rendering:shaders:

[[https://news.ycombinator.com/item?id=13448047][Hackernews discussion]] with some interesting discourse and links such as [[https://fgiesen.wordpress.com/2013/02/06/the-barycentric-conspirac/][The Barycentric Conspiracy]].

** [[https://www.fasterthan.life/blog/2017/7/11/i-am-graphics-and-so-can-you-part-1][I Am Graphics And So Can You]] 	       :graphics:3d:rendering:vulkan:


** [[http://iquilezles.org/www/index.htm][Íñigo Quílez' Demo and Shader Graphics Articles]] :graphics:demo:scene:shaders:

* Hardware
** [[https://jaycarlson.net/microcontrollers/][The Amazing $1 Microcontroller]]

   Exploration of 21 different microcontrollers each costing less than $1 to help familiarize oneself with all the major ecosystems out there.

   #+BEGIN_QUOTE
While some projects that come across my desk are complex enough to require a hundreds-of-MHz microcontroller with all the bells and whistles, it’s amazing how many projects work great using nothing more than a $1 chip — so this is the only rule I established for the shoot-out. 1

I wanted to explore the $1 pricing zone specifically because it’s the least amount of money you can spend on an MCU that’s still general-purpose enough to be widely useful in a diverse array of projects.

Any cheaper, and you end up with 6- or 8-pin parts with only a few dozen bytes of RAM, no ADC, nor any peripherals other than a single timer and some GPIO.

Any more expensive, and the field completely opens up to an overwhelming number of parts — all with heavily-specialized peripherals and connectivity options.

These MCUs were selected to represent their entire families — or sub-families, depending on the architecture — and in my analysis, I’ll offer some information about the family as a whole.

If you want to scroll down and find out who the winner is, don’t bother — there’s really no sense in trying to declare the “king of $1 MCUs” as everyone knows the best microcontroller is the one that best matches your application needs. I mean, everyone knows the best microcontroller is the one you already know how to use. No, wait — the best microcontroller is definitely the one that is easiest to prototype with. Or maybe that has the lowest impact on BOM pricing?

I can’t even decide on the criteria for the best microcontroller — let alone crown a winner.

What I will do, however, is offer a ton of different recommendations for different users at the end. Read on!
   #+END_QUOTE
* Home Automation
** [[http://www.bruhautomation.com/][Bruh Automation]] :home:automation:tutorials:reviews:

   Lots of resources including their [[https://github.com/bruhautomation][github]] for various home automation things.

*** [[https://www.youtube.com/watch?v=9KI36GTgwuQ][The BEST Digital LED Strip Light Tutorial - DIY, WIFI-Controllable via ESP, MQTT, and Home Assistant]] :home:automation:led:strip:mqtt:2016:

* Locksmithery and Lockpickery

** [[https://www.defcon.org/images/defcon-21/dc-21-presentations/Tobias-Bluzmanis/DEFCON-21-Tobias-Bluzmanis-Insecurity-A-Failure-of-Imagination.pdf][A FAILURE OF IMAGINATION: Kwikset Smartkey® and Insecurity Engineering]] :physical:security:lockpicking:kwikset:smart:key:

* Make

** [[http://nullprogram.com/blog/2017/08/20/][A Tutorial on Portable Makefiles]] :portable:make:2017:

* Mazes

** [[http://weblog.jamisbuck.org/2011/2/7/maze-generation-algorithm-recap][Maze Generation Algorithm Recap]] :maze:algorithms:

Nice recap of maze generation algorithms from a minecraft modder.  Check out his [[http://jamisbuck.org/mazes/minecraft.html][minecraft maze generator]].

* Networking
** [[https://www.nanog.org/sites/default/files/2_Steenbergen_Tutor][Everything You Always Wanted to Know About Optical Networking – But Were Afraid to Ask]] :networking:optical:fiber:2017:

** [[http://beej.us/guide/bgnet/][Beej's Guide to Network Programming]] :networking:programming:c:unix:sockets:beejs:guide:

   Famous and extensive introductory text to programming with unix sockets.  Only really touches on simple synchronous socket servers for the most part.

   *TODO* - recategorize as their own links
   See also:
   - [[http://beej.us/guide/bgc/][Beej's Guide to C Programming]]
   - [[http://beej.us/guide/bgipc/][Beej's Guide to Unix Interprocess Communication]]
   - [[http://beej.us/guide/bggdb/][Beej's Quick Guide to GDB]]

** [[https://modern.ircdocs.horse/][Modern IRC Client Protocol]] :networking:protocol:living:documentation:irc:
* Papers
** [[https://www.theatlantic.com/magazine/archive/1945/07/as-we-may-think/303881/][As We May Think]] 						 :paper:1945:

    Some musings on hypertext and what we might build after the conclusion of World War II.

** [[http://math.harvard.edu/~ctm/home/text/others/shannon/entropy/entropy.pdf][A Mathematical Theory of Communication]] 	      :paper:networking:1948:

    Defines the term "bit" for Binary digIT.

** [[https://www.csee.umbc.edu/courses/471/papers/turing.pdf][Computing Machinery and Intelligence]] :paper:turing:artificial:intelligence:1950:
** [[https://ia801903.us.archive.org/1/items/bstj29-2-147/bstj29-2-147.pdf][Error Detecting and Error Correcting Codes]] 		 :paper:hamming:1950:

** [[http://www-formal.stanford.edu/jmc/recursive.html][Recursive Functions of Symbolic Expressions and their Computation by Machine]] :paper:mccarthy:lisp:1960:
** [[http://www.melconway.com/Home/Committees_Paper.html][How do Committees Invent]] 		     :paper:design:organization:1968:
    Apparently this some of the inspiration for Mythical Man Month.
** [[https://www-ee.stanford.edu/~hellman/publications/24.pdf][New Directions in Cryptography]]    :paper:cryptography:diffie:hellman:1976:
** [[http://amturing.acm.org/p558-lamport.pdf][Time, Clocks, and the Ordering of Events in a Distributed System]] :paper:distributed:1978:
** [[http://fermatslibrary.com/s/reflections-on-trusting-trust][Reflections on Trusting Trust]] 	     :paper:security:trust:unix:1984:
** [[https://www.student.cs.uwaterloo.ca/~cs492/11public_html/p18-smith.pdf][The Limits of Corrrectness]] 					 :paper:1985:
** [[http://www.usingcsp.com/cspbook.pdf][Communicating Sequential Processes]] 		      :paper:concurrent:1985:
** [[http://cseweb.ucsd.edu/~ravir/274/15/papers/p143-kajiya.pdf][The Rendering Equation]] 	     :paper:graphics:rendering:pipeline:1986:
** [[http://www.wisdom.weizmann.ac.il/~harel/papers/Statecharts.pdf][StateCharts: A Visual Formalism for Complex Systems]] :paper:statemachine:1987:
** [[http://fermatslibrary.com/s/a-sample-of-brilliance][A Sample of Brilliance]] 		     :paper:randomness:sampling:1987:
** [[https://www.finseth.com/craft/][A Cookbook for an Emacs]] 				   :paper:emacs:1991:
** [[http://home.pipeline.com/~hbaker1/CheneyMTA.html][CONS Should Not CONS Its Arguments, Part II: Cheney on the M.T.A.]] :paper:lisp:scheme:tail:recursion:c:1994:
** [[https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/state-lasc.pdf][State in Haskell]] 				   :paper:haskell:state:1995:
** [[https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf][Purely Functional Data Structures]] :paper:functional:programming:data:structures:1996:
** [[https://www.cs.cmu.edu/~fp/courses/15317-f00/handouts/logic.pdf][Constructive Logic]] 					   :paper:logic:2000:
** [[http://erlang.org/download/armstrong_thesis_2003.pdf][Making Reliable Distributed Systems in the Presence of Software Errors]] :paper:distributed:systems:2003:
** [[https://github.com/papers-we-love/papers-we-love/blob/master/design/out-of-the-tar-pit.pdf][Out of the Tarpit]] 			       :paper:design:complexity:2006:
** [[http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf][Dynamo: Amazon’s Highly Available Key-value Store]] :paper:distrubted:database:dynamodb:2007:
** [[https://bitcoin.org/bitcoin.pdf][Bitcoin: A Peer-to-Peer Electronic Cash System]] :paper:cryptography:currency:bitcoin:2008:
** [[http://www.diku.dk/hjemmesider/ansatte/henglein/papers/henglein2011a.pdf][Generic Top-down Discrimination for Sorting and Partitioning in Linear Time]] :paper:sorting:2010:
**** [[http://www.diku.dk/hjemmesider/ansatte/henglein/papers/henglein2011c.pdf][Generic Multiset Programming with Discrimination-based Joins and Symbolic Cartesian Products]] :paper:sorting:2011:
** [[https://raft.github.io/raft.pdf][In Search of an Understandable Consensus Algorithm]] :paper:distributed:consenus:2014:

* Programming Languages
** [[http://norvig.com/lispy.html][(How to Write a (Lisp) Interpreter (in Python))]] :norvig:implementing:lisp:in:python:2010:
** [[https://carld.github.io/2017/06/20/lisp-in-less-than-200-lines-of-c.html][Lisp In Less Than 200 Lines Of C]] :implementing:lisp:in:c:2017:
* Revision Control

** [[https://git-scm.com/book/en/v2][Git Book (v2)]] 						   :git:book:

** [[http://gitready.com/][git ready]] 						    :git:tips:tricks:

** [[https://github.com/GitAlias/gitalias/blob/master/gitalias.txt][GitAlias/gitalias/gitalias.txt]] 		   :git:alias:aliases:tricks:

** [[http://manishearth.github.io/blog/2017/03/05/understanding-git-filter-branch/][Understanding git filter-branch]] 		 :git:advanced:branch:tricks:

** [[http://nvie.com/posts/a-successful-git-branching-model/][A successful Git branching model]] 		  :git:workflow:branch:model:

    Original post from 2010.  Also check out [[https://github.com/nvie/gitflow][Van Driessen's git flow plugin]].

** [[https://www.atlassian.com/git/tutorials/comparing-workflows][Atlassian's comparing workflows and tutorials]]  :git:workflow:branch:model:

** [[https://bitbucket.org/yujiewu/hgflow/wiki/Home.wiki#!generalized-driessens-branching-model][HGFlow - Generalized Driessen's Branching Model]] :hg:workflow:branch:model:

** [[https://guides.github.com/introduction/flow/][Understanding the Github Flow]] 	   :git:github:workflow:branch:model:

** [[https://github.com/jonas/tig][tig]] 						       :git:porcelain:curses:

** [[https://magit.vc/][Magit]] 						:git:porcelain:emacs:

* Shells

** [[https://zanshin.net/2013/02/02/zsh-configuration-from-the-ground-up/][Zsh Configuration From the Ground Up]] :zsh:configuration:tutorial:2013:
** [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][Eschewing Zshell for Emacs Shell]] :zsh:emacs:eshell:

* Systems Engineering

** [[https://alestic.com/2010/12/ec2-user-data-output/][Logging user-data Script Output on EC2 Instances]] :systems:cloudinit:logging:aws:ec2:

** [[http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html][Linux Load Averages: Solving the Mystery]] :systems:linux:load:average:algorithm:history:

** Terraform

*** [[https://opencredo.com/terraform-infrastructure-design-patterns/][Terraform Infrastructure Design Patterns]] :systems:terraform:2015:
*** [[https://medium.com/levops/self-invented-how-to-terraform-rules-4b1eb00709ac][Self-invented “how to Terraform” rules]] :systems:terraform:2017:

* Uncategorized Otherwise
** [[http://www.silota.com/docs/recipes/][Advanced SQL Recipes to jumpstart your Analysis]] :sql:tricks:data:analysis:
** [[http://www.linusakesson.net/programming/tty/][The TTY Demystified]] :unix:history:tty:
** [[http://blog.triplebyte.com/how-to-interview-engineers][How to Interview Engineers]] :hiring:engineers:

** [[https://the-eye.eu/public/rom/][The Eye's ROM Section]] :open:index:emulation:nes:snes:gba:n64:

The Eye's Rom Section is a project dedicated towards the preservation and archival of video games. All game versions present on the site are already out of production and are unavailable in the primary market.

** [[http://willamette.edu/~fruehr/haskell/evolution.html][Evolution of a Haskell Programmer]] :haskell:humor:
** [[http://farmos.org/][FarmOS]] :open:source:farm:management:

** [[https://www.believermag.com/issues/200609/][Destroy All Monsters]] :role:playing:dungeons:and:dragons:2006:

** [[http://lcamtuf.coredump.cx/prep/][Doomsday planning for less crazy folk]] :planning:for:life:
** [[http://rigsomelight.com/2013/09/09/frameless-geodesic-dome.html][Frameless Geodesic Dome]] :construction:design:geodesic:dome:
** [[https://ski.ihoc.net/][The Most Officialest SkiFree Home Page!]] :software:history:skifree:

** [[http://vvvvalvalval.github.io/posts/what-makes-a-good-repl.html][What makes a good REPL?]] :programming:language:interpreter:design:clojure:
** [[https://nesdoug.com/][How to Program an NES game in C]] :programming:nintendo:entertainment:system:2017:
** [[https://github.com/karllhughes/side-project-marketing/blob/master/marketing-checklist.md][Side Project Marketing Checklist]] :open:source:marketing:checklist:2017:
** [[http://www.drdobbs.com/architecture-and-design/software-engineering-computer-science/217701907][Software Engineering ≠ Computer Science]] :software:engineering:architecture:design:2009:

** [[http://www.projectrho.com/public_html/rocket/worldbuilding.php][Worldbuilding]] :world:building:

   Resource on all things world-building with lots of interesting information and pointers to more information about world building.

** [[https://www.youtube.com/channel/UCEXz4oDS5KqIcinH2CjxVfg/videos][Eckkehard The German Butcher]] :youtube:channel:charcutery:butchery:

** [[http://www.idallen.com/topposting.html][Topposting and Bottomposting]] :opinion:holy:war:email:netiquette:
** [[https://techsolidarity.org/resources/basic_security.htm][Basic security precautions for non-profits and journalists in the United States]] :computer:security:guidelines:precautions:2017:
** [[https://mynoise.net/NoiseMachines/neuromodulationTonesGenerator.php][Neural Symphony - Neuromodulated Tinnitus Relief]] :audio:neural:tinnitus:relief:

   Sounds purported to help provide temporary relief to tinnitus sufferers.

* UNIX and BSD
** [[https://fosdem.org/2017/schedule/event/my_bsd_sucks_less/][My BSD Sucks Less Than Yours]] :talk:unix:openbsd:freebsd:

** [[https://manpages.bsd.lv/][Practical UNIX Manuals - mdoc: structure, style, and composition]] :book:unix:man:pages:mdoc:
* Video Series
** [[https://www.youtube.com/watch?list=PL2VAYZE_4wRJi_vgpjsH75kMhN4KsuzR_&v=m0TsdytmGhc][Little Bits of Lisp with Baggers]] :video:series:common:lisp:
** [[https://www.youtube.com/watch?v=MCuzvy79WWQ][Rewriting BSD 4.4 Shell Commands (part 1: cat)]]

   According to [[https://learnto.computer/courses][learnto.computer/courses]] not all of the episodes are intended to be free, but at least at one time they were.

* Web Comics
** [[http://darthsanddroids.net/episodes/0001.html][Darths and Droids]] :webcomic:tabletop:rpg:starwars:
